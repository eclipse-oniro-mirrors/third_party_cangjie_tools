// Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
// This source file is part of the Cangjie project, licensed under Apache-2.0
// with Runtime Library Exception.
//
// See https://cangjie-lang.cn/pages/LICENSE for license information.

// The Cangjie API is in Beta. For details on its capabilities and limitations, please refer to the README file.
// mut 函数是一种特殊的实例成员函数。在mut 函数内部，this 的语义是特殊的，这种this 拥有原地修
// 改字段的能力，修改会立刻生效。我们可以使用这种特性，让struct 类型的实例函数拥有修改自身的功能，
// 以满足特殊的场景。

//定义
// mut 函数使用mut 关键字修饰，只允许在interface、struct 和struct 的扩展中定义，并且只能作用在
// 实例成员函数（不支持静态成员函数和操作符重载）。

struct A {
    mut func f(): Unit {} // ok
    mut static func g(): Unit {} // error
    mut operator func +(rhs: A): A { // error
    return A()
}
}
extend A {
    mut func h(): Unit {} // ok
}
class B {
    mut func f(): Unit {} // error
}

interface II {
    mut func f(): Unit // ok
}

// 在mut 函数中可以对struct 实例的字段进行赋值，这些赋值会修改实例并立刻生效。与实例成员函数
// 相同，this 不是必须的，可以由编译器推断。
struct Foo_1 {
    var i = 0
    mut func f() {
        this.i += 1 // ok
        i += 1 // ok
    }
    func f2() {
        this.i += 1 // error
        i += 1 // error
    }
}

func test_1() {
    var a = Foo_1() //0

    a.f() //2

    a.f() //4

    return 0
}

//mut 函数中的this 不能被捕获（意味着当前实例的字段也不能被捕获），也不能作为表达式。
struct Foo_2 {
    var i = 0
    mut func f(): Foo_2 {
        let f1 = { => this } // error
        let f2 = { => this.i = 2 } // error
        let f3 = { => this.i } // error
        let f4 = { => i } // error
        return this // error
    }
}

//接口中的mut 函数
interface I {
    mut func f1(): Unit
    func f2(): Unit
}
struct CC <: I {
    mut func f1(): Unit {} // ok
    func f2(): Unit {} // ok
}
struct BB <: I {
    func f1(): Unit {} // error
    mut func f2(): Unit {} // error
}
class C <: I {
    func f1(): Unit {} // ok
    func f2(): Unit {} // ok
}

// 需要注意的是，当struct 的实例赋值给interface 类型时是拷贝语义，因此interface 的mut 函数并不
// 能修改原本struct 实例的值。
interface I2 {
    mut func f(): Unit
}
struct Foo_3 <: I2 {
    var v = 0
    mut func f(): Unit {
        v += 1
    }
}
func test_2() {
    var a = Foo_3()
    var b: I2 = a
    b.f()
    var test = a.v // 0
    return 0
}

//访问规则
// 如果一个变量使用let 声明，并且类型可能是struct （包含静态类型是struct 类型，或者类型变元可
// 能是struct 类型），那么这个变量不能访问该类型使用mut 修饰的函数。其它情况均允许访问。
interface I4 {
mut func f(): Unit
}
struct Foo_4 <: I4 {
    var i = 0
    mut func f(): Unit {
        i += 1
    }
}
class Bar <: I4 {
    var i = 0
    func f(): Unit {
        i += 1
    }
}
func test_3() {
    let a = Foo_4()
    a.f() // error
    var b = Foo_4()
    b.f() // ok
    let c: I4 = Foo_4()
    c.f() // ok
    return 0
}

func g1<T>(v: T): Unit where T <: I {
    v.f() // error
}
func g2<T>(v: T): Unit where T <: Bar & I {
    v.f() // ok
}


//非mut 的实例成员函数（包括lambda 表达式）不能访问this 的mut 函数，反之可以。
struct Foo_6 {
    var i = 0
    mut func f(): Unit {
        i += 1
        g() // ok
    }
    func g(): Unit {
        f() // error
    }
}
interface I6 {
    mut func f(): Unit {
        g() // ok
    }
    func g(): Unit {
        f() // error
    }
}
