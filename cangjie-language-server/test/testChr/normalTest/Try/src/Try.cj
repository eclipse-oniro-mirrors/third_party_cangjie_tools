// Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
// This source file is part of the Cangjie project, licensed under Apache-2.0
// with Runtime Library Exception.
//
// See https://cangjie-lang.cn/pages/LICENSE for license information.

// The Cangjie API is in Beta. For details on its capabilities and limitations, please refer to the README file.

func tesst() {
    // Catch with wildcardPattern.
    let a = 10
    try {
        a = 10
    } catch (_) {
        print("catch an exception!")
    }
}


// The first situation.
func main1() {
    try {
        throw ArithmeticException()
    } catch (e: RuntimeException) { // Caught.
        print("RuntimeException and its subtypes can be caught here")
    }
}

// User defined exceptions.
open class Father <: Exception {
    var father: Int32 = 0
    func whatFather() { print("I am Father") }
}
class ChildOne <: Father {
    var childOne: Int32 = 1
    func whatChildOne() { print("I am ChildOne") }
    func whatChild() { print("I am method in ChildOne") }
}
class ChildTwo <: Father {
    var childTwo: Int32 = 2
    func whatChildTwo() { print("I am ChildTwo") }
    func whatChild() { print("I am method in ChildTwo") }
}

// Function main.
func main2() {
    var a = 1
    try {
        a = 2
    } catch (e: ChildOne | ChildTwo ){
        e.whatFather() // ok: e is an object of Father
        //e.whatChildOne() // error: e is an object of Father
        //e.whatChild() // error: e is an object of Father
        print("${e}") // ok: e is an object of Father
        //print(e.childOne) // error: e is an object of Father
        //print(e.childOTwo) // error: e is an object of Father
    }
    func throwE() {
        if (a == 1) {
            throw ChildOne()
        } else {
            throw ChildTwo()
        }
    }
    return 0
}

func f():Int64 {
    var x = 1;
    try {
        return x + x;  // Return 2.
    } catch (e: RuntimeException) { // Caught.
        print("RuntimeException and its subtypes can be caught here")
    } finally {
        x = 2;
  }  // The return value is 2 but not 4.
  return x;
}

func f11():Int64 {
    var x = 1;
    try {
        return x + x;  // Return 2.
    } catch (e: RuntimeException) { // Caught.
        print("RuntimeException and its subtypes can be caught here")
    } finally {
        x = 2;
  }  // The return value is 2 but not 4.
  return x;
}


// Caught by catchE().
func catchE() {
    let arrayTest: RefArray<Int32> = RefArray<Int32>([0, 1, 2])
    try {
        throwE() // caught by catchE()
    } catch (e: Exception) {
        print("an ArrayIndexOutOfBoundsException happened: " )
    }
}

// Terminate function is executed.
func notCatchE() {
    let arrayTest: RefArray<Int32> = RefArray<Int32>([0, 1, 2])
    throwE()
}

// func throwE()
func throwE() {}
func throwE1() {throw Exception()}

func a3() {
    var a = 10
    try {
        throw Exception()
        a = 10
    }
}//err

func a2() {

// Catch with exceptionTypePattern.
    var a = 10

    try {
        throw Exception()
        a = 10
        try{
            a = 10
        }
    } catch (e:  Exception) {
        var b = 10
    } finally {
        print("the finally block is executed")
    }
}

