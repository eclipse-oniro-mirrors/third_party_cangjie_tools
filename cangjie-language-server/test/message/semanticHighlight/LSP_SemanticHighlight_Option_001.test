{"caseFolder":"normalTest//Option", "id":"9"}
{"jsonrpc":"2.0","id":"0","method":"initialize","params":{"processId":null,"rootPath":"C:/Users/code_project/DevEcoStudioProjects/MyApplication3","rootUri":"file:///c%3A/Users/code_project/DevEcoStudioProjects/MyApplication3/","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{},"didChangeWatchedFiles":{},"symbol":{},"executeCommand":{},"workspaceFolders":false,"configuration":false},"textDocument":{"synchronization":{"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"completionItem":{"snippetSupport":true}},"hover":{},"signatureHelp":{},"references":{},"documentHighlight":{"dynamicRegistration":true},"formatting":{},"rangeFormatting":{},"onTypeFormatting":{},"definition":{},"codeAction":{},"documentLink":{},"rename":{"prepareSupport":true},"semanticHighlightingCapabilities":{"semanticHighlighting":true},"callHierarchy":{},"semanticTokens":{"tokenTypes":["namespace","type","class","enum","interface","struct","typeParameter","parameter","variable","property","enumMember","event","function","method","macro","keyword","modifier","comment","string","number","regexp","operator","member","label"],"tokenModifiers":["declaration","definition","readonly","static","deprecated","abstract","async","modification","documentation","defaultLibrary"],"dynamicRegistration":true}}}}}
{"jsonrpc":"2.0","method":"initialized","params":{}}
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///d:/test_char/src/Option.cj","languageId":"Cangjie","version":0,"text":"// Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.\n// This source file is part of the Cangjie project, licensed under Apache-2.0\n// with Runtime Library Exception.\n//\n// See https://cangjie-lang.cn/pages/LICENSE for license information.\n\nlet aaa:?String = \"\" //等价于 Option<String>\r\nlet v1: ?Int64 = 100 //等价于 Option<Int64>\r\nlet v2: ??Int64 = 100 //等价于 Option<Option<Int64>>\r\n\r\nfunc testOptionRight() {\r\n    let number: Int64 = match (v1) {\r\n        case Some(num) => num // matched\r\n        case None => 0\r\n    }\r\n    let number2: Int64 = match (v2) {\r\n        case Some(num) => match (num) {\r\n              case Some(num) => num // matched\r\n              case None => 0\r\n              } // matched\r\n        case None => 0\r\n    }\r\n}\r\nenum TimeUnit1 {\r\n\t |Year|Month|Day|Hour\r\n}\r\nlet opInt32_1 = Option<Int64>.Some(100) // The type of 'opInt32_1' is 'Option<Int32>'\r\nlet opInt32_2 = Option<Int32>.None // The type of 'opInt32_2' is 'Option<Int32>'\r\nlet opChar = Option<Char>.Some('m') // The type of 'opChar' is 'Option<Char>'\r\nlet opBool = Option<Bool>.None // The type of 'opBool' is 'Option<Bool>'\r\nlet opEnum = Option<TimeUnit1>.Some(TimeUnit1.Year) // The type of 'opEnum' is 'Option<TimeUnit1>'\r\n\r\n//支持match解构\r\nfunc test1(){\r\n    let number1: Int64 = match (opInt32_1) {\r\n        case Some(num) => num // matched\r\n        case None => 0\r\n    }\r\n    let number2: Int32 = match (opInt32_2) {\r\n        case Some(num) => num\r\n        case None => 0 // matched\r\n    }\r\n    let enumValue: String = match (opEnum) {\r\n    case Some(tu) => match (tu) {\r\n        case Year => \"Year\" // matched\r\n        case Month => \"Month\"\r\n        case Day => \"Day\"\r\n        case Hour => \"Hour\"\r\n        }\r\n    case None => \"None\"\r\n    }\r\n}"}}}
{"jsonrpc":"2.0","id":"9","method":"textDocument/semanticTokens","params":{"textDocument":{"uri":"file:///d:/test_char/src/Option.cj"}}}
{"jsonrpc":"2.0","id":"4","method":"shutdown","params":{}}
{"jsonrpc":"2.0","method":"exit","params":{}}