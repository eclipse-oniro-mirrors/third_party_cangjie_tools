package default.victor

open  public class A{
    init(defaultA:Int64){}
    public init(publicA:Int64,publicB:Int64){ this.}
    private init(privateA:Int64,privateB:Int64,privateC:Int64){}
    protected init(protectedA:Int64,protectedB:Int64,protectedC:Int64,protectedD:Int64){}

    func Afunc(defaultA:Int64){}
    public func Afunc(publicA:Int64,publicB:Int64){}
    private func Afunc(privateA:Int64,privateB:Int64,privateC:Int64){}
    protected func Afunc(protectedA:Int64,protectedB:Int64,protectedC:Int64,protectedD:Int64){}

    static func s_Afunc(defaultA:Int64){}
    static public func s_Afunc(publicA:Int64,publicB:Int64){}
    static private func s_Afunc(privateA:Int64,privateB:Int64,privateC:Int64){}
    static protected func s_Afunc(protectedA:Int64,protectedB:Int64,protectedC:Int64,protectedD:Int64){}
}

open public class B <: A{
    init(defaultA:Int64){
            super(defaultA);
            super.Afunc(1);
            super.Afunc(1,1);
            super.Afunc(1,1,1);
            super.Afunc(1,1,1,1);
            this.
            super.
        }
}

public class C <: B{
    init(defaultA:Int64){super(defaultA)}
}

// 构造函数 场景
let init_default = A(1,)
let init_public = A(1,2)
let init_private = A(1,2,3)
let init_protect = A(1,2,3,4)

//本包静态
let init_default_s = A.s_Afunc(1)
let init_public_s = A.s_Afunc(1,1)
let init_private_s = A.s_Afunc(1,2,1)
let init_protect_s = A.s_Afunc(1,2,3,4)

// 一般成员函数 场景
let func_default = init_public.Afunc(1)
let func_public = init_public.Afunc(1,2,)
let func_private = init_public.Afunc(1,2,3)
let func_protect = init_public.Afunc(1,2,3,4)

// 本包的 继承类的场景
let curPkg_init_default = B(1)

let curPkg_default =  curPkg_init_default.Afunc(1)
let curPkg_public =  curPkg_init_default.Afunc(1,2)
let curPkg_private =  curPkg_init_default.Afunc(1,2,3)
let curPkg_protected =  curPkg_init_default.Afunc(1,2,3,4)

//本包继承静态
let Bdefault_s = B.s_Afunc(1)
let B_public_s = B.s_Afunc(1,1)
let B_private_s = B.s_Afunc(1,2,1)
let B_protect_s = B.s_Afunc(1,2,3,4)

//本包深度继承静态
let C_default_s = C.s_Afunc(1)
let Cpublic_s = C.s_Afunc(1,1)
let C_private_s = C.s_Afunc(1,2,1)
let C_protect_s = C.s_Afunc(1,2,3,4)


// 本包的 深层继承类的场景
let curPkg_init_default_deep = C(1)

let curPkg_default_deep = C(1).Afunc(1)
let curPkg_public_deep = C(1).Afunc(1,2)
let curPkg_private_deep = C(1).Afunc(1,2,3)
let curPkg_protected_deep = C(1).Afunc(1,2,3,4)


//测试
let t1 = A.   //portect public default
let t2 = A(1).  //portect public default
let t3 = B.   //portect public default
let t4 = B(1).   //portect public default
let t5 = C.   //portect public default

// Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
// This source file is part of the Cangjie project, licensed under Apache-2.0
// with Runtime Library Exception.
//
// See https://cangjie-lang.cn/pages/LICENSE for license information.

// The Cangjie API is in Beta. For details on its capabilities and limitations, please refer to the README file.
