{"caseFolder":"normalTest//List"}
{"jsonrpc":"2.0","id":"1","method":"initialize","params":{"processId":null,"rootPath":"D:/Work/projects/Iteration_5th/B055/UT","rootUri":"file:///d%3A/Work/projects/Iteration_5th/B055/UT/","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{},"didChangeWatchedFiles":{},"symbol":{},"executeCommand":{},"workspaceFolders":false,"configuration":false},"textDocument":{"synchronization":{"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"completionItem":{"snippetSupport":true}},"hover":{},"signatureHelp":{},"references":{},"documentHighlight":{"dynamicRegistration":true},"formatting":{},"rangeFormatting":{},"onTypeFormatting":{},"definition":{},"codeAction":{},"documentLink":{},"rename":{"prepareSupport":true},"semanticHighlightingCapabilities":{"semanticHighlighting":true},"callHierarchy":{},"semanticTokens":{"tokenTypes":["namespace","type","class","enum","interface","struct","typeParameter","parameter","variable","property","enumMember","event","function","method","macro","keyword","modifier","comment","string","number","regexp","operator","member","label"],"tokenModifiers":["declaration","definition","readonly","static","deprecated","abstract","async","modification","documentation","defaultLibrary"],"dynamicRegistration":true}}}}}
{"jsonrpc":"2.0","method":"initialized","params":{}}
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///d%3A/Work/repo/Char/NewVersion/cangjie_language_server/test/testChr/normalTest/List/src/testList/testList01.cj","languageId":"Cangjie","version":1,"text":"// Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.\n// This source file is part of the Cangjie project, licensed under Apache-2.0\n// with Runtime Library Exception.\n//\n// See https://cangjie-lang.cn/pages/LICENSE for license information.\n\npackage testList\r\npublic var externalList = [1, 2, 3, 3, 2, 1]\r\nopen class List_A{}\r\n\r\nclass List_B <:List_A{}\r\n\r\nclass List_C{}\r\n\r\nstruct List_D {   \r\n} \r\n\r\nfunc TEST_LIST1(){\r\n    let emptyList : List<Int64> = [] // empty List<Int64>\r\n    let list_int = [1, 2, 3, 3, 2, 1] // list_int = [1, 2, 3, 3, 2, 1]\r\n    let list_exp = [1 + 3, 2 + 3, 3 + 3] // list_exp = [4, 5, 6]\r\n    list_exp.isEmpty()\r\n    let list_spread1 = [1, 2, 3, *emptyList, 3, 2, 1] // list_spread1 = [1, 2, 3, 3,2, 1]\r\n    let list_spread2 = [1, 2, 3, *list_int, 3, 2, 1] // list_spread2 = [1, 2, 3, 4, 5, 6, 3, 2, 1]\r\n    let list_str = [\"a\", \"b\", \"c\"]\r\n    let list_float = [4.0, 5.0, 6.0]\r\n    let list_error_1 = [1, 2, 3, *list_float] // error: type mismatch\r\n    let list_error_2 = [1.1, 2.2, 3.3, *list_str] // error: type mismatch\r\n\r\n    let list_spread3 = [*[[1,2,3]]] // list7 = [[1,2,3]]\r\n    let list_spread4 = [*[[1,2,3]],[4,5],[6,7,8]] // list8 = [[1,2,3],[4,5],[6,7,8]]\r\n    let list_error_3 = [**[[1,2,3]],4,5,6] // syntax error\r\n\r\n\r\n    let listZero: List<Int32> = [] // empty List\r\n    let listOne: List<Int32> = [1, 2, 3, 4]\r\n    var listTwo: List<Int64> = [5, 6, 7]\r\n    var list_initialization: List<Float32>\r\n    list_initialization = [3.14, 4.14, 5.14] // initialization\r\n\r\n    var listFour = [\"A\", \"B\", \"C\"] // The type of listFour is inferred to be List<String>.\r\n    var listFive = listFour // The type of listFive is inferred to be List<Float32>.\r\n\r\n    var list_class = [List_A(), List_B()] // The type of listSix is inferred to be List<A>.\r\n    var list_class2 = [List_A(), List_C()] //The type of listSix is inferred to be List<object>.\r\n    var list_class3 = [List_A(), List_D()] //error\r\n    let nestedList = [[1, 2, 3, 4], [5, 6, 7]] // The type of nestedList is inferred to be List<List<Int64>>.\r\n}\r\n\r\nfunc testSpread() {\r\n    let emptyList : List<Int64> = []\r\n    let list0 = [1, 2, 3, *emptyList, 3, 2, 1] // list0 = [1, 2, 3, 3,2, 1]\r\n    let list1 = [4, 5, 6]\r\n    let list2 = [1, 2, 3, *list1, 3, 2, 1] // list2 = [1, 2, 3, 4, 5, 6, 3, 2, 1]\r\n    let list3 = [4.0, 5.0, 6.0]\r\n    let list4 = [1, 2, 3, *list3] // error: type mismatch\r\n    let list5 = [\"a\", \"b\", \"c\"]\r\n    let list6 = [1.1, 2.2, 3.3, *list5] // error: type mismatch\r\n    let list7 = [*[[1,2,3]]] // list7 = [[1,2,3]]\r\n    let list8 = [*[[1,2,3]],[4,5],[6,7,8]] // list8 = [[1,2,3],[4,5],[6,7,8]]\r\n    let list9 = [**[[1,2,3]],4,5,6] // syntax error\r\n    let list11 = [1, 2, 3, *(if (1<2) {[4, 5]} else {[6, 7]})]\r\n\r\n    return 0\r\n}"}}}
{"jsonrpc":"2.0","id":1,"method":"shutdown","params":{}}
{"jsonrpc":"2.0","method":"exit","params":{}}