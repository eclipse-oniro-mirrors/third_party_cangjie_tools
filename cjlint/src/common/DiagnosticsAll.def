// mandatory rule should add between mandatory_diag_begin and mandatory_diag_end.
MANDATORY(mandatory_diag_begin, "")
MANDATORY(G_CHK_01_illegal_func_arg, "G.CHK.01: In function '%s', %s")
MANDATORY(G_CHK_01_illegal_return, "G.CHK.01: The return value is untrusted, we can't deliver it outter.")
MANDATORY(G_CHK_02_external_data_record_logs, "G.CHK.02: '%s' is external data, it should not be used to record logs")
MANDATORY(G_CLS_01_override_super_func, "G.CLS.01: Subclass function '%s' in class '%s' have more privileges than their super class")
MANDATORY(G_CON_01_synchronized_object_modifier_information_0, "G.CON.01: '%s' should not be used as modifier of synchronized object")
MANDATORY(G_CON_01_synchronized_object_modifier_information_1, "G.CON.01: '%s' should be used as modifier of synchronized object")
MANDATORY(G_CON_01_synchronized_object_modifier_information_2, "G.CON.01: '%s' should not be defined at top-level")
MANDATORY(G_CON_03_override_func_thread_safe, "G.CON.03: Override function '%s' should not use non-thread safe way to override a thread-safe function")
MANDATORY(G_ENU_01_0_duplicate_name_information, "G.ENU.01: '%s' redeclared as different kind of symbol")
MANDATORY(G_ENU_01_1_duplicate_name_information, "G.ENU.01: Enum sugar access '%s' conflict with type name, try to change it")
MANDATORY(G_EXP_03_side_effect_information, "G.EXP.03: Right operand '%s' include side effect")
MANDATORY(G_FIO_01, "G.FIO.01: '%s' may be a temporary file, please make sure temporary file will eventually be deleted before return statement: Line: %d, Colum: %d")
MANDATORY(G_FIO_01_compile_add_return, "G.FIO.01: '%s' may be a temporary file, please make sure temporary file will eventually be deleted before return statement")
MANDATORY(G_FMT_01_encoding_UTF_8_information, "G.FMT.01: The source file encoding format (including comments) must be UTF-8")
MANDATORY(G_OTH_01_log_sensitive_information, "G.OTH.01: Sensitive information (keyword '%s') should not be recorded to logs.")
MANDATORY(G_OTH_02_hardcode_sensitive_information, "G.OTH.02: %s is sensitive information is hard-coded in the program")
MANDATORY(G_OTH_02_hardcode_sensitivename_information, "G.OTH.02: SenInfoName found!%s is sensitive information is hard-coded in the program")
MANDATORY(G_OTH_02_hardcode_weakpasscode_information, "G.OTH.02: WeakPasscode found!%s is sensitive information is hard-coded in the program")
MANDATORY(G_OTH_03_public_email_hardcode_information, "G.OTH.03: %s is public email, hard-coded in the program")
MANDATORY(G_OTH_03_public_ip_hardcode_information, "G.OTH.03: %s is public ip, hard-coded in the program")
MANDATORY(G_OTH_03_public_url_hardcode_information, "G.OTH.03: %s is public url, hard-coded in the program")
MANDATORY(G_SEC_01_open_check_function_information, "G.SEC.01: Checking function '%s' is declared as open in an open class, it can be overridden")
MANDATORY(G_SER_01_serialize_sensitive_field, "G.SER.01: Serialize sensitive field '%s' may cause information leak")
MANDATORY(G_SER_01_serialize_sensitive_data, "G.SER.01: Serialize unencrypted sensitive data '%s' may cause information leak")
MANDATORY(G_SER_02_Deserialization_Bypass, "G.SER.02: Assign variable '%s' in deserialization function without checking")
MANDATORY(G_SER_03_key_lack, "G.SER.03: Type mismatch: the deserialize type of '%s' is %s, but in function 'serialize()', '%s' is not serialized.")
MANDATORY(G_SER_03_return_error, "G.SER.03: Type mismatch: the deserialize type of '%s' is %s, but in function 'serialize()', return type is %s, not 'DataModelStruct'.")
MANDATORY(G_SER_03_type_error, "G.SER.03: Type mismatch: the deserialized type of '%s' is %s, but in function 'serialize()', the type is %s.")
MANDATORY(G_SER_03_type_lack, "G.SER.03: Type mismatch: type '%s' is deserialized in line %d, but in function 'serialize()', return type is %s.")
MANDATORY(P_01_dead_lock, "P.01: The nested synchronized objects has a different sequence than the nested synchronized objects on the line %d of the file '%s', which may cause a deadlock.")
MANDATORY(G_ERR_02_sensitive_exception, "G.ERR.02: The '%s' is a sensitive exception type.")
MANDATORY(G_ERR_02_sensitive_info, "G.ERR.02: The thrown exception contains sensitive information '%s'.")
MANDATORY(G_ERR_04_avoid_return_finally, "G.ERR.04: Avoid using 'return' to cause a finally block to terminate abnormally.")
MANDATORY(G_ERR_04_avoid_break_finally, "G.ERR.04: Avoid using 'break' to cause a finally block to terminate abnormally.")
MANDATORY(G_ERR_04_avoid_continue_finally, "G.ERR.04: Avoid using 'continue' to cause a finally block to terminate abnormally.")
MANDATORY(G_ERR_04_avoid_throw_finally, "G.ERR.04: Avoid throwing exceptions to cause a finally block to terminate abnormally.")
MANDATORY(G_CHK_04_untrusted_regular_expressions_redundantGroup, "G.CHK.04: '%s' has redundant grouping, regular expressions should minimize the use of groupings.")
MANDATORY(G_CHK_04_untrusted_regular_expressions_itselfRepeated, "G.CHK.04: Regular expression: '%s' is susceptible to ReDos attacks, any regular expression containing a grouping expression with repetition that is itself repeated is going to be vulnerable.")
MANDATORY(G_CHK_04_untrusted_regular_expressions_subexpressionsOverlap, "G.CHK.04: Regular expression: '%s' is susceptible to ReDos attacks, any group containing alternation where the alternate subexpressions overlap one another is vulnerable.")
MANDATORY(G_CHK_04_untrusted_regular_expressions_external_data, "G.CHK.04: '%s' is or includes external data, it should not be used to regular expressions directly.")
MANDATORY(G_CON_02_lock, "G.CON.02: Use %s.lock() outside try block or release '%s' at finally block.")
MANDATORY(G_FUN_02_unused_param_information, "G.FUN.02: Parameter '%s' is unused parameter")
MANDATORY(P_02_diff_mutex, "P.02: %sthe same variable is protected by different mutex")
MANDATORY(P_02_no_mutex, "P.02: '%s' is used in line %s but not be protected by mutex")
MANDATORY(P_03_func_could_be_overridden, "P.03: '%s' could be inherited and func '%s' could be overridden, Defensive copy required for security checks")
MANDATORY(G_SYN_01_disable_syntax_information_01, "G.SYN.01: The syntax '%s' is disabled in this project.")
MANDATORY(G_SYN_01_disable_syntax_information_02, "G.SYN.01: The primitive type '%s' is disabled in this project.")
MANDATORY(G_SYN_01_disable_syntax_information_03, "G.SYN.01: The container type '%s' is disabled in this project.")
MANDATORY(G_TYP_03_use_isNaN_method_float, "G.TYP.03: The isNaN() method must be used to determine whether a Float type variable is NaN.")
MANDATORY(G_DCL_02_public_variable_type, "G.DCL.02: The type of the public variable '%s' needs to be explicitly declared.")
MANDATORY(G_DCL_02_public_function_type, "G.DCL.02: The return type of the public function '%s' needs to be explicitly declared.")
MANDATORY(G_CHK_03_without_canonicalize, "G.CHK.03: The file path '%s' that may be constructed from external data must be canonicalized before validation.")
MANDATORY(G_CHK_03_without_verify, "G.CHK.03: The file path '%s' that may be constructed from external data must be verified before use.")
MANDATORY(mandatory_diag_end, "")

SUGGESTIONS(G_EXP_02_not_accurate_float_operation_01, "G.EXP.02: '%s' cannot be accurately represented in the current floating point number type.")
SUGGESTIONS(G_EXP_02_not_accurate_float_operation_02, "G.EXP.02: Floating-point numbers typically come with errors when representing real numbers, so it is recommended to avoid using '%s' for direct comparison.")
SUGGESTIONS(G_NAM_01_Package_Information, "G.NAM.01: The name of the '%s' package must contain only digits, lowercase letters, and underscores (_).")
SUGGESTIONS(G_NAM_01_Package_name_should_match_path, "G.NAM.01: The name of the '%s' package must correspond to the directory where the source code resides.")
SUGGESTIONS(G_NAM_02_filename_lower_information, "G.NAM.02: Filename '%s' is recommended to use digits, lowercase letters and underscores(_)")
SUGGESTIONS(G_NAM_02_filename_standard_information, "G.NAM.02: Filename '%s' does not match the unique externally visible top-level element identifier '%s'")
SUGGESTIONS(G_NAM_03_exception_naming_information, "G.NAM.03: Exception class '%s' recommend to advised to add the Exception/Error")
SUGGESTIONS(G_NAM_03_identifier_naming_information, "G.NAM.03: Identifier '%s' recommend to use upper camel case for interface, class, struct, enumeration type, enumeration member construction, type alias")
SUGGESTIONS(G_NAM_04_function_naming_information, "G.NAM.04: Function name '%s' recommend to use lower camel case")
SUGGESTIONS(G_NAM_05_immutable_global_variable_naming_information, "G.NAM.05: Immutable global or static variable name '%s' recommend to use all capital letters")
SUGGESTIONS(G_NAM_06_generic_type_parameters, "G.NAM.06: Generic parameter '%s' is not recommended to use lowercase characters")
SUGGESTIONS(G_NAM_06_var_camelCase_name, "G.NAM.06: Variable '%s' is recommended to use camelCase naming")
SUGGESTIONS(G_NAM_06_propertie_camelCase_name, "G.NAM.06: Properties '%s' is recommended to use camelCase naming")
SUGGESTIONS(G_NAM_06_parameter_camelCase_name, "G.NAM.06: Parameter '%s' is recommended to use camelCase naming")
SUGGESTIONS(G_DCL_01_avoid_shadow, "G.DCL.01: '%s' on line %d is shadowed by the '%s' on line %d, please avoid shadowing.")
SUGGESTIONS(G_CHK_04_untrusted_regular_expressions_dynamical_regex, "G.CHK.04: '%s' is or includes function parameter, regular expressions should not be built dynamically.")
SUGGESTIONS(G_VAR_03_global_variable_declaration_information, "G.VAR.03: Avoid declaring global variable '%s'.")
SUGGESTIONS(G_PKG_01_avoid_wildcard, "G.PKG.01: Avoid using the wildcard '*' in the import declaration '%s'.")
SUGGESTIONS(G_ERR_01_exceptions_process_01, "G.ERR.01: Exceptions should not be discarded without any processing.")
SUGGESTIONS(G_ERR_01_exceptions_process_02, "G.ERR.01: The exception types that may be thrown should be described in the API comments.")
SUGGESTIONS(G_ERR_03_avoid_option_getorthrow, "G.ERR.03: Avoid using the getOrThrow() function of the Option type.")
SUGGESTIONS(G_EXP_06_avoid_redundant_op_in_bool_type_comparisons, "G.EXP.06: Avoid redundant operator '==' or '!=' in boolean type comparisons.")
SUGGESTIONS(G_OPR_02_enum_parentheses_overload_information, "G.OPR.02: Avoid defining '%s' operator overloading functions in enumeration types.")
SUGGESTIONS(G_ITF_02_prefer_implement_interfaces_at_type_definition, "G.ITF.02: Prefer implementing interfaces at the type definition level rather than through extension.")
SUGGESTIONS(G_EXP_04_side_effect_depend_on_order, "G.EXP.04: Avoiding side effects in '%s' depends on the order of evaluation of expressions.")
SUGGESTIONS(G_EXP_07_constants_on_the_right, "G.EXP.07: '%s' is constant, please put it on the right of comparison operators.")
SUGGESTIONS(G_CLS_01_increase_the_accessibility_of_the_function_01, "G.CLS.01: Please don't increase the accessibility of the function when override the parent class's function.")
SUGGESTIONS(G_CLS_01_increase_the_accessibility_of_the_function_02, "G.CLS.01: This function increases the accessibility of other functions.")
SUGGESTIONS(G_ITF_01_should_use_mut_modifier, "G.ITF.01: '%s' should use mut modifier to support struct type to implement or extend this interface.")
SUGGESTIONS(G_ITF_03_avoid_declaring_both_parent_interface_and_sub_interface, "G.ITF.03: '%s' is the sub-interface of '%s', please avoid declaring both parent-interface and sub-interface.")
SUGGESTIONS(G_ITF_04_avoid_directly_using_interfaces_as_types_01, "G.ITF.04: The type of parameter '%s' is interface, please avoid directly using interface as type parameter, and Try to constrain the generic type by interface as type parameter.")
SUGGESTIONS(G_ITF_04_avoid_directly_using_interfaces_as_types_02, "G.ITF.04: The return type of function '%s' is interface, please avoid directly using interface as return type, and Try to constrain the generic type by interface as return type.")
SUGGESTIONS(G_EXP_01_avoid_mixed_patterns_in_match_expr_01, "G.EXP.01: The case of irrefutable pattern is recommended to be placed after all the cases of refutable pattern.")
SUGGESTIONS(G_EXP_01_avoid_mixed_patterns_in_match_expr_02, "G.EXP.01: Avoid mixing patterns with different matching dimensions within the same level of a match expression.")
SUGGESTIONS(G_ENU_02_enum_constructor_overload_information, "G.ENU.02: The enum constructor or function '%s' is overloaded.")
SUGGESTIONS(G_FUN_01_function_single_responsibility_information_0, "G.FUN.01: The function '%s' is recommended to have no more than 5 parameters.")
SUGGESTIONS(G_FUN_01_function_single_responsibility_information_1, "G.FUN.01: The function '%s' is recommended to have no more than 50 lines of code.")
SUGGESTIONS(G_FUN_01_function_single_responsibility_information_2, "G.FUN.01: The maximum depth of nested code blocks in a function is recommended to be no more than 4 levels.")
SUGGESTIONS(G_FUN_01_function_single_responsibility_information_3, "G.FUN.01: The lambda expression is recommended to have no more than 5 parameters.")
SUGGESTIONS(G_FUN_01_function_single_responsibility_information_4, "G.FUN.01: The lambda expression is recommended to have no more than 50 lines of code.")
SUGGESTIONS(G_FUN_01_function_single_responsibility_information_5, "G.FUN.01: The maximum depth of nested code blocks in a lambda expression is recommended to be no more than 4 levels.")
SUGGESTIONS(G_FUN_03_overload_in_different_scopes, "G.FUN.03: Avoid overloaded functions '%s' appearing in different scopes.")
SUGGESTIONS(G_FUN_03_params_in_overload_funcs, "G.FUN.03: Avoid having the same set of arguments pass type checks for multiple functions '%s' among overloaded functions.")
SUGGESTIONS(G_OPR_01_avoid_operator_overloading_that_violates_conventions_01, "G.OPR.01: Avoid overloading the operator '%s' that is already supported by built-in types.")
SUGGESTIONS(G_OPR_01_avoid_operator_overloading_that_violates_conventions_02, "G.OPR.01: Avoid overloading the operator '%s' that violates usage habits.")
SUGGESTIONS(G_OTH_04_avoid_use_string_type_to_store_sensitive_data, "G.OTH.04: Avoid using 'String' to store sensitive data. Sensitive data should be cleared immediately after being used.")
SUGGESTIONS(G_EXP_05_use_parentheses_to_express_operations_order_01, "G.EXP.05: The unary operator '%s' does not need to be enclosed in parentheses.")
SUGGESTIONS(G_EXP_05_use_parentheses_to_express_operations_order_02, "G.EXP.05: The operators are the same and do not require parentheses here.")
SUGGESTIONS(G_EXP_05_use_parentheses_to_express_operations_order_03, "G.EXP.05: Here parentheses are not needed to indicate priority.")
SUGGESTIONS(G_EXP_05_use_parentheses_to_express_operations_order_04, "G.EXP.05: Suggest to use parentheses to explicitly indicate the order of operations in an expression.")
SUGGESTIONS(G_VAR_01_prefer_immutable_var, "G.VAR.01: Prefer immutable variables when the value of the variable '%s' does not change.")
SUGGESTIONS(G_VAR_01_prefer_immutable_prop, "G.VAR.01: Prefer not to declare it as mutable and avoid defining a setter function for an unchanging property '%s'.")
SUGGESTIONS(G_VAR_01_prefer_immutable_member, "G.VAR.01: Prefer immutable variables when the value of the member variable '%s' does not change.")
SUGGESTIONS(G_FMT_13_header_comments_copyright_01, "G.FMT.13: The file header comments should contain the copyright information.")
SUGGESTIONS(G_FMT_13_header_comments_copyright_02, "G.FMT.13: The copyright information should use block comments.")
SUGGESTIONS(G_VAR_02_min_scope, "G.VAR.02: Prefer variable '%s' to follow the principle of minimizing scope.")
SUGGESTIONS(G_FMT_15_leading_zero_before_decimal, "G.FMT.15: Leading zeros before a decimal should not be omitted in '%s'.")
SUGGESTIONS(FFI_C_7_avoid_truncation_error, "FFI.C.7: Avoid truncation errors when performing forced pointer type conversions.")