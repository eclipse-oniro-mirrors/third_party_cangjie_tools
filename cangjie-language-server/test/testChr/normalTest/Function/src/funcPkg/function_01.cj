package default.funcPkg

/*函数声明*/
//函数声明可以出现在抽象类，接口，trait中。
abstract class C1 {
    func add() :Int32
}

func add1(a: Int32, b!: Int32 = 1): Int32 { a + b }
func add2(a!: Int32, b: Int32): Int32 { a + b } // error
func add3(a: Int32, b: Int32 = 1): Int32 { a + b } // error
func add4(a: Int32, b!: Int32 = 1): Int32 { a + b } //error
func add4(a: Int32, b!: Int32 = 1): Int32 { a + b } //error

func returnAdd(a: Int32, b: Int32): (Int32, Int32) -> Int32 {
return {a, b => a + b} // Return a lambda expression.
}

func add(a: Int32, b!: Int32 = 1): Int32 { a + b }
func defaultPara(){
    add(3) // invoke add(3, 1), return 4
    add(3, b: 2) // return 5
}

//嵌套函数
func nest() {
    let c = 1
    print("${c}") // OK
}

func nest_test()  {
func nest_lv_1(a: Int32, b: Int32) { a + b}
let c = 1
    func nest() {   //OK
    print("${c}") // 1
    var b = nest_lv_1(1, 2) // b = 3
    }
}

//函数返回值类型推断
//Write return explicitly.
func return_test_1()  {
    return 3 // Compilation error.
}

// Return is not written.
func return_test_2(a: Int32, b: Int32) {
    return_test_1()
    var c = a + b
    if (c > 100) {
        // // Compilation error.
        return c
    }
    return return_test_3()
}

//相互调用的函数的返回类型依赖关系的环状检查
func return_test_3(){
    var ret: Int32 = return_test_2(1,2)
    return ret
}

//相互调用的函数的返回类型依赖关系的环状检查
func return_test_4(a: Int32, add:(Int32, Int32) -> Int32 ) {

    return_test_1()
    var c = a + 1
    if (c > 100) {
        // // Compilation error.
        return c
    }
    return return_test_3()
}

//函数作为参数
func addFuncAsPara(a: Int32, add:(Int32, Int32) -> Int32 ) {
    let a = add(1,2)
}

func addFuncAsParaTest(){
    var c: Int32 = 9
    let d: Int32 = 9
    addFuncAsPara(10,{a:Int32, b:Int32 =>
    a + b+ c+ d})
}

public func Lambda(){
    var sum1: (Int32, Int32) -> Int32 = {a, b => a + b}
    var sum2: (Int32, Int32) -> Int32 = {a: Int32, b => a + b}
    var sum3 = {a:Int32, b:Int32 => a + b}
    var display = { => print("Hello") }
    var a = { => return 1 }
}
// Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
// This source file is part of the Cangjie project, licensed under Apache-2.0
// with Runtime Library Exception.
//
// See https://cangjie-lang.cn/pages/LICENSE for license information.

// The Cangjie API is in Beta. For details on its capabilities and limitations, please refer to the README file.
