{"caseFolder":"normalTest//Mut"}
{"jsonrpc":"2.0","id":"1","method":"initialize","params":{"processId":null,"rootPath":"D:/Work/projects/Iteration_5th/B055/UT","rootUri":"file:///d%3A/Work/projects/Iteration_5th/B055/UT/","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{},"didChangeWatchedFiles":{},"symbol":{},"executeCommand":{},"workspaceFolders":false,"configuration":false},"textDocument":{"synchronization":{"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"completionItem":{"snippetSupport":true}},"hover":{},"signatureHelp":{},"references":{},"documentHighlight":{"dynamicRegistration":true},"formatting":{},"rangeFormatting":{},"onTypeFormatting":{},"definition":{},"codeAction":{},"documentLink":{},"rename":{"prepareSupport":true},"semanticHighlightingCapabilities":{"semanticHighlighting":true},"callHierarchy":{},"semanticTokens":{"tokenTypes":["namespace","type","class","enum","interface","struct","typeParameter","parameter","variable","property","enumMember","event","function","method","macro","keyword","modifier","comment","string","number","regexp","operator","member","label"],"tokenModifiers":["declaration","definition","readonly","static","deprecated","abstract","async","modification","documentation","defaultLibrary"],"dynamicRegistration":true}}}}}
{"jsonrpc":"2.0","method":"initialized","params":{}}
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///d%3A/Work/repo/Char/Fork/cangjie_language_server/test/testChr/normalTest/Mut/src/testMut.cj","languageId":"Cangjie","version":1,"text":"// Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.\n// This source file is part of the Cangjie project, licensed under Apache-2.0\n// with Runtime Library Exception.\n//\n// See https://cangjie-lang.cn/pages/LICENSE for license information.\n\n// mut 函数是一种特殊的实例成员函数。在mut 函数内部，this 的语义是特殊的，这种this 拥有原地修\r\n// 改字段的能力，修改会立刻生效。我们可以使用这种特性，让struct 类型的实例函数拥有修改自身的功能，\r\n// 以满足特殊的场景。\r\n\r\n//定义\r\n// mut 函数使用mut 关键字修饰，只允许在interface、struct 和struct 的扩展中定义，并且只能作用在\r\n// 实例成员函数（不支持静态成员函数和操作符重载）。\r\n\r\nstruct A {\r\n    mut func f(): Unit {} // ok\r\n    mut static func g(): Unit {} // error\r\n    mut operator func +(rhs: A): A { // error\r\n    return A()\r\n}\r\n}\r\nextend A {\r\n    mut func h(): Unit {} // ok\r\n}\r\nclass B {\r\n    mut func f(): Unit {} // error\r\n}\r\n\r\ninterface II {\r\n    mut func f(): Unit // ok\r\n}\r\n\r\n// 在mut 函数中可以对struct 实例的字段进行赋值，这些赋值会修改实例并立刻生效。与实例成员函数\r\n// 相同，this 不是必须的，可以由编译器推断。\r\nstruct Foo_1 {\r\n    var i = 0\r\n    mut func f() {\r\n        this.i += 1 // ok\r\n        i += 1 // ok\r\n    }\r\n    func f2() {\r\n        this.i += 1 // error\r\n        i += 1 // error\r\n    }\r\n}\r\n\r\nfunc test_1() {\r\n    var a = Foo_1() //0\r\n\r\n    a.f() //2\r\n\r\n    a.f() //4\r\n\r\n    return 0\r\n}\r\n\r\n//mut 函数中的this 不能被捕获（意味着当前实例的字段也不能被捕获），也不能作为表达式。\r\nstruct Foo_2 {\r\n    var i = 0\r\n    mut func f(): Foo_2 {\r\n        let f1 = { => this } // error\r\n        let f2 = { => this.i = 2 } // error\r\n        let f3 = { => this.i } // error\r\n        let f4 = { => i } // error\r\n        return this // error\r\n    }\r\n}\r\n\r\n//接口中的mut 函数\r\ninterface I {\r\n    mut func f1(): Unit\r\n    func f2(): Unit\r\n}\r\nstruct CC <: I {\r\n    mut func f1(): Unit {} // ok\r\n    func f2(): Unit {} // ok\r\n}\r\nstruct BB <: I {\r\n    func f1(): Unit {} // error\r\n    mut func f2(): Unit {} // error\r\n}\r\nclass C <: I {\r\n    func f1(): Unit {} // ok\r\n    func f2(): Unit {} // ok\r\n}\r\n\r\n// 需要注意的是，当struct 的实例赋值给interface 类型时是拷贝语义，因此interface 的mut 函数并不\r\n// 能修改原本struct 实例的值。\r\ninterface I2 {\r\n    mut func f(): Unit\r\n}\r\nstruct Foo_3 <: I2 {\r\n    var v = 0\r\n    mut func f(): Unit {\r\n        v += 1\r\n    }\r\n}\r\nfunc test_2() {\r\n    var a = Foo_3()\r\n    var b: I2 = a\r\n    b.f()\r\n    var test = a.v // 0\r\n    return 0\r\n}\r\n\r\n//访问规则\r\n// 如果一个变量使用let 声明，并且类型可能是struct （包含静态类型是struct 类型，或者类型变元可\r\n// 能是struct 类型），那么这个变量不能访问该类型使用mut 修饰的函数。其它情况均允许访问。\r\ninterface I4 {\r\nmut func f(): Unit\r\n}\r\nstruct Foo_4 <: I4 {\r\n    var i = 0\r\n    mut func f(): Unit {\r\n        i += 1\r\n    }\r\n}\r\nclass Bar <: I4 {\r\n    var i = 0\r\n    func f(): Unit {\r\n        i += 1\r\n    }\r\n}\r\nfunc test_3() {\r\n    let a = Foo_4()\r\n    a.f() // error\r\n    var b = Foo_4()\r\n    b.f() // ok\r\n    let c: I4 = Foo_4()\r\n    c.f() // ok\r\n    return 0\r\n}\r\n\r\nfunc g1<T>(v: T): Unit where T <: I {\r\n    v.f() // error\r\n}\r\nfunc g2<T>(v: T): Unit where T <: Bar & I {\r\n    v.f() // ok\r\n}\r\n\r\n\r\n//非mut 的实例成员函数（包括lambda 表达式）不能访问this 的mut 函数，反之可以。\r\nstruct Foo_6 {\r\n    var i = 0\r\n    mut func f(): Unit {\r\n        i += 1\r\n        g() // ok\r\n    }\r\n    func g(): Unit {\r\n        f() // error\r\n    }\r\n}\r\ninterface I6 {\r\n    mut func f(): Unit {\r\n        g() // ok\r\n    }\r\n    func g(): Unit {\r\n        f() // error\r\n    }\r\n}"}}}
{"jsonrpc":"2.0","id":"9","method":"textDocument/semanticTokens","params":{"textDocument":{"uri":"file:///d%3A/Work/repo/Char/Fork/cangjie_language_server/test/testChr/normalTest/Mut/src/testMut.cj"}}}
{"jsonrpc":"2.0","id":"1","method":"shutdown","params":{}}
{"jsonrpc":"2.0","method":"exit","params":{}}