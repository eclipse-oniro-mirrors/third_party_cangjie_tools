{"caseFolder":"normalTest//Function", "id":"7"}
{"jsonrpc":"2.0","id":"1","method":"initialize","params":{"processId":null,"rootPath":"D:/Work/projects/Iteration_5th/B055/UT","rootUri":"file:///d%3A/Work/projects/Iteration_5th/B055/UT/","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{},"didChangeWatchedFiles":{},"symbol":{},"executeCommand":{},"workspaceFolders":false,"configuration":false},"textDocument":{"synchronization":{"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"completionItem":{"snippetSupport":true}},"hover":{},"signatureHelp":{},"references":{},"documentHighlight":{"dynamicRegistration":true},"formatting":{},"rangeFormatting":{},"onTypeFormatting":{},"definition":{},"codeAction":{},"documentLink":{},"rename":{"prepareSupport":true},"semanticHighlightingCapabilities":{"semanticHighlighting":true},"callHierarchy":{},"semanticTokens":{"tokenTypes":["namespace","type","class","enum","interface","struct","typeParameter","parameter","variable","property","enumMember","event","function","method","macro","keyword","modifier","comment","string","number","regexp","operator","member","label"],"tokenModifiers":["declaration","definition","readonly","static","deprecated","abstract","async","modification","documentation","defaultLibrary"],"dynamicRegistration":true}}}}}
{"jsonrpc":"2.0","method":"initialized","params":{}}
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///d%3A/Work/repo/Char/NewVersion/cangjie_language_server/test/testChr/normalTest/Function/src/funcPkg/function_01.cj","languageId":"Cangjie","version":1,"text":"// Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.\n// This source file is part of the Cangjie project, licensed under Apache-2.0\n// with Runtime Library Exception.\n//\n// See https://cangjie-lang.cn/pages/LICENSE for license information.\n\npackage funcPkg\r\n\r\n/*函数声明*/\r\n//函数声明可以出现在抽象类，接口，trait中。\r\nabstract class C1 {\r\n    func add() :Int32\r\n}\r\n\r\nfunc add1(a: Int32, b!: Int32 = 1): Int32 { a + b }\r\nfunc add2(a!: Int32, b: Int32): Int32 { a + b } // error\r\nfunc add3(a: Int32, b: Int32 = 1): Int32 { a + b } // error\r\nfunc add4(a: Int32, b!: Int32 = 1): Int32 { a + b } //error\r\nfunc add4(a: Int32, b!: Int32 = 1): Int32 { a + b } //error\r\n\r\nfunc returnAdd(a: Int32, b: Int32): (Int32, Int32) -> Int32 {\r\nreturn {a, b => a + b} // Return a lambda expression.\r\n}\r\n\r\nfunc add(a: Int32, b!: Int32 = 1): Int32 { a + b }\r\nfunc defaultPara(){\r\n    add(3) // invoke add(3, 1), return 4\r\n    add(3, b: 2) // return 5\r\n}\r\n\r\n//嵌套函数\r\nfunc nest() {\r\n    let c = 1\r\n    print(\"${c}\") // OK\r\n}\r\n\r\nfunc nest_test()  {\r\nfunc nest_lv_1(a: Int32, b: Int32) { a + b}\r\nlet c = 1\r\n    func nest() {   //OK\r\n    print(\"${c}\") // 1\r\n    var b = nest_lv_1(1, 2) // b = 3\r\n    }\r\n}\r\n\r\n//函数返回值类型推断\r\n//Write return explicitly.\r\nfunc return_test_1()  {\r\n    return 3 // Compilation error.\r\n}\r\n\r\n// Return is not written.\r\nfunc return_test_2(a: Int32, b: Int32) {\r\n    return_test_1()\r\n    var c = a + b\r\n    if (c > 100) {\r\n        // // Compilation error.\r\n        return c\r\n    }\r\n    return return_test_3()\r\n}\r\n\r\n//相互调用的函数的返回类型依赖关系的环状检查\r\nfunc return_test_3(){\r\n    var ret: Int32 = return_test_2(1,2)\r\n    return ret\r\n}\r\n\r\n//相互调用的函数的返回类型依赖关系的环状检查\r\nfunc return_test_4(a: Int32, add:(Int32, Int32) -> Int32 ) {\r\n\r\n    return_test_1()\r\n    var c = a + 1\r\n    if (c > 100) {\r\n        // // Compilation error.\r\n        return c\r\n    }\r\n    return return_test_3()\r\n}\r\n\r\n//函数作为参数\r\nfunc addFuncAsPara(a: Int32, add:(Int32, Int32) -> Int32 ) {\r\n    let a = add(1,2)\r\n}\r\n\r\nfunc addFuncAsParaTest(){\r\n    var c: Int32 = 9\r\n    let d: Int32 = 9\r\n    addFuncAsPara(10,{a:Int32, b:Int32 =>\r\n    a + b+ c+ d})\r\n}\r\n\r\npublic func Lambda(){\r\n    var sum1: (Int32, Int32) -> Int32 = {a, b => a + b}\r\n    var sum2: (Int32, Int32) -> Int32 = {a: Int32, b => a + b}\r\n    var sum3 = {a:Int32, b:Int32 => a + b}\r\n    var display = { => print(\"Hello\") }\r\n    var a = { => return 1 }\r\n}\r\n"}}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Work/repo/Char/NewVersion/cangjie_language_server/test/testChr/normalTest/Function/src/funcPkg/function_01.cj","version":4},"contentChanges":[{"range":{"start":{"line":97,"character":27},"end":{"line":97,"character":27}},"rangeLength":0,"text":"\r\n    "}]}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Work/repo/Char/NewVersion/cangjie_language_server/test/testChr/normalTest/Function/src/funcPkg/function_01.cj","version":5},"contentChanges":[{"range":{"start":{"line":98,"character":4},"end":{"line":98,"character":4}},"text":"addfunc"}]}}
{"jsonrpc":"2.0","id":7,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///d%3A/Work/repo/Char/NewVersion/cangjie_language_server/test/testChr/normalTest/Function/src/funcPkg/function_01.cj"},"position":{"line":98,"character":11}}}
{"jsonrpc":"2.0","id":1,"method":"shutdown","params":{}}
{"jsonrpc":"2.0","method":"exit","params":{}}