{"caseFolder":"normalTest//AsOperator"}
{"jsonrpc":"2.0","id":"1","method":"initialize","params":{"processId":null,"rootPath":"D:/Work/projects/Iteration_5th/B055/UT","rootUri":"file:///d%3A/Work/projects/Iteration_5th/B055/UT/","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{},"didChangeWatchedFiles":{},"symbol":{},"executeCommand":{},"workspaceFolders":false,"configuration":false},"textDocument":{"synchronization":{"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"completionItem":{"snippetSupport":true}},"hover":{},"signatureHelp":{},"references":{},"documentHighlight":{"dynamicRegistration":true},"formatting":{},"rangeFormatting":{},"onTypeFormatting":{},"definition":{},"codeAction":{},"documentLink":{},"rename":{"prepareSupport":true},"semanticHighlightingCapabilities":{"semanticHighlighting":true},"callHierarchy":{},"semanticTokens":{"tokenTypes":["namespace","type","class","enum","interface","struct","typeParameter","parameter","variable","property","enumMember","event","function","method","macro","keyword","modifier","comment","string","number","regexp","operator","member","label"],"tokenModifiers":["declaration","definition","readonly","static","deprecated","abstract","async","modification","documentation","defaultLibrary"],"dynamicRegistration":true}}}}}
{"jsonrpc":"2.0","method":"initialized","params":{}}
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///d%3A/Work/repo/Char/Fork/cangjie_language_server/test/testChr/normalTest/AsOperator/src/asOperator.cj","languageId":"Cangjie","version":1,"text":"// Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.\n// This source file is part of the Cangjie project, licensed under Apache-2.0\n// with Runtime Library Exception.\n//\n// See https://cangjie-lang.cn/pages/LICENSE for license information.\n\n/**\r\ne as T 是一个用于类型转换的表达式，e as T 的类型是Option<T>。其中e 可以是任何类型的表达式，T\r\n可以是任何具体类型。\r\n当e 的运行时类型R 是T 的子类型时，e as T 的值为Some(e)，否则值为None。\r\nas 操作符举例：\r\n*/\r\ninterface IB {\r\n\r\n}\r\n\r\nopen class Base <:IB{\r\nvar name: String = \"Alice\"\r\n}\r\nclass Derived1 <: Base {\r\nvar age: UInt8 = 18\r\n}\r\nclass Derived2 <: Base {\r\nvar gender: String = \"female\"\r\n}\r\nfunc main(): Int64 {\r\n    let base1_rename: Base = Base()\r\n    let ib = base1_rename as IB\r\n    let base2: Base = Derived1()\r\n    let base3: Base = Derived2()\r\n    let derived1: Derived1 = Derived1()\r\n    let derived2: Derived2 = Derived2()\r\n    let castOP1 = base1_rename as Base // castOP = Option<Base>.Some(base1)\r\n    let castOP2 = base1_rename as Derived1 // castOP = Option<Derived1>.None\r\n    let castOP3 = base1_rename as Derived2 // castOP = Option<Derived2>.None\r\n    let castOP4 = base2 as Base // castOP = Option<Base>.Some(base2)\r\n    let castOP5 = base2 as Derived1 // castOP = Option<Derived1>.Some(base2)\r\n    let castOP6 = base2 as Derived2 // castOP = Option<Derived2>.None\r\n    let castOP7 = base3 as Base // castOP = Option<Base>.Some(base3)\r\n    let castOP8 = base3 as Derived1 // castOP = Option<Derived1>.None\r\n    let castOP9 = base3 as Derived2 // castOP = Option<Derived2>.Some(base3)\r\n    let castOP10 = derived1 as Base // castOP = Option<Base>.Some(derived1)\r\n    let castOP11 = derived1 as Derived1 // castOP = Option<Derived1>.Some(derived1)\r\n    let castOP12 = derived1 as Derived2 // castOP = Option<Derived2>.None\r\n    let castOP13 = derived2 as Base // castOP = Option<Base>.Some(derived2)\r\n    let castOP14 = derived2 as Derived1 // castOP = Option<Derived1>.None\r\n    let castOP15 = derived2 as Derived2 // castOP = Option<Derived2>.Some(derived2)\r\n    return 0\r\n}\r\n\r\n"}}}
{"jsonrpc":"2.0","id":"1","method":"shutdown","params":{}}
{"jsonrpc":"2.0","method":"exit","params":{}}