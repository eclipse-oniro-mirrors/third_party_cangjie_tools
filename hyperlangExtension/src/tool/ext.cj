// Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
// This source file is part of the Cangjie project, licensed under Apache-2.0
// with Runtime Library Exception.
//
// See https://cangjie-lang.cn/pages/LICENSE for license information.

// The Cangjie API is in Beta. For details on its capabilities and limitations, please refer to the README file.

package hle.tool

import std.collection.ArrayList
import std.collection.HashSet
import std.fs.{exists as fs_exists, remove as fs_remove, File, Directory, FileInfo}

extend<T> Array<T> {
    public func map<R>(mapper: (e: T, i: Int64) -> R): Array<R> {
        let list = ArrayList<R>()
        for (i in 0..this.size) {
            list.add(mapper(this[i], i))
        }
        return list.toArray()
    }
}

public interface FileObjectFunc {
    static func exists(path: String): Bool
    static func delete(path: String, recursive!: Bool): Unit
}

extend File <: FileObjectFunc {
    public static func exists(path: String): Bool {
        return fs_exists(path)
    }
    public static func delete(path: String, recursive!: Bool = false): Unit {
        return fs_remove(path, recursive: recursive)
    }
}

extend Directory <: FileObjectFunc {
    public static func exists(path: String): Bool {
        return fs_exists(path)
    }
    public static func delete(path: String, recursive!: Bool = false): Unit {
        return fs_remove(path, recursive: recursive)
    }
}

public interface FileInfoFunc {
    func isFile(): Bool
}

extend FileInfo <: FileInfoFunc {
    public func isFile(): Bool {
        return this.isRegular()
    }
}
