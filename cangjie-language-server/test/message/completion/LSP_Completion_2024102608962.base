{"id":14,"jsonrpc":"2.0","result":[{"deprecated":false,"detail":"(interface) public interface Any","documentation":"","filterText":"Any","insertText":"Any","insertTextFormat":1,"kind":8,"label":"Any","sortText":""},{"deprecated":false,"detail":"(struct) public struct Array<T>","documentation":"","filterText":"Array","insertText":"Array<${1:T}>","insertTextFormat":2,"kind":22,"label":"Array<T>","sortText":""},{"deprecated":false,"detail":"(function) public func init()","documentation":"","filterText":"Array<T>","insertText":"Array<${1:T}>()","insertTextFormat":2,"kind":3,"label":"Array<T>()","sortText":""},{"deprecated":false,"detail":"(function) public func init(size: Int64, initElement: (Int64) -> Generics-T)","documentation":"","filterText":"Array<T>","insertText":"Array<${1:T}>(${3:size: Int64}, ${4:initElement: (Int64) -> Generics-T})","insertTextFormat":2,"kind":3,"label":"Array<T>(size: Int64, initElement: (Int64) -> Generics-T)","sortText":""},{"deprecated":false,"detail":"(function) public func init(size: Int64, repeat!: T)","documentation":"","filterText":"Array<T>","insertText":"Array<${1:T}>(${3:size: Int64}, repeat: ${4:T})","insertTextFormat":2,"kind":3,"label":"Array<T>(size: Int64, repeat!: T)","sortText":""},{"deprecated":false,"detail":"(class) public class ArrayIterator<T> <: Iterator<T>","documentation":"","filterText":"ArrayIterator","insertText":"ArrayIterator<${1:T}>","insertTextFormat":2,"kind":7,"label":"ArrayIterator<T>","sortText":""},{"deprecated":false,"detail":"(function) public func init(data: Array<T>)","documentation":"","filterText":"ArrayIterator<T>","insertText":"ArrayIterator<${1:T}>(${3:data: Array<T>})","insertTextFormat":2,"kind":3,"label":"ArrayIterator<T>(data: Array<T>)","sortText":""},{"deprecated":false,"detail":"public type Byte = UInt8","documentation":"","filterText":"Byte","insertText":"Byte","insertTextFormat":1,"kind":7,"label":"Byte","sortText":""},{"deprecated":false,"detail":"(interface) public sealed open interface CType","documentation":"","filterText":"CType","insertText":"CType","insertTextFormat":1,"kind":8,"label":"CType","sortText":""},{"deprecated":false,"detail":"(class) public class IllegalMemoryException <: Exception","documentation":"","filterText":"IllegalMemoryException","insertText":"IllegalMemoryException","insertTextFormat":1,"kind":7,"label":"IllegalMemoryException","sortText":""},{"deprecated":false,"detail":"(function) public func init()","documentation":"","filterText":"IllegalMemoryException","insertText":"IllegalMemoryException()","insertTextFormat":1,"kind":3,"label":"IllegalMemoryException()","sortText":""},{"deprecated":false,"detail":"(function) public func init(message: String)","documentation":"","filterText":"IllegalMemoryException","insertText":"IllegalMemoryException(${1:message: String})","insertTextFormat":2,"kind":3,"label":"IllegalMemoryException(message: String)","sortText":""},{"deprecated":false,"detail":"(class) public class NegativeArraySizeException <: Exception","documentation":"","filterText":"NegativeArraySizeException","insertText":"NegativeArraySizeException","insertTextFormat":1,"kind":7,"label":"NegativeArraySizeException","sortText":""},{"deprecated":false,"detail":"(function) public func init()","documentation":"","filterText":"NegativeArraySizeException","insertText":"NegativeArraySizeException()","insertTextFormat":1,"kind":3,"label":"NegativeArraySizeException()","sortText":""},{"deprecated":false,"detail":"(function) public func init(message: String)","documentation":"","filterText":"NegativeArraySizeException","insertText":"NegativeArraySizeException(${1:message: String})","insertTextFormat":2,"kind":3,"label":"NegativeArraySizeException(message: String)","sortText":""},{"deprecated":false,"detail":"(class) public class OutOfMemoryError <: Error","documentation":"","filterText":"OutOfMemoryError","insertText":"OutOfMemoryError","insertTextFormat":1,"kind":7,"label":"OutOfMemoryError","sortText":""},{"deprecated":false,"detail":"","documentation":"","filterText":"acquireArrayRawData","insertText":"acquireArrayRawData","insertTextFormat":1,"kind":2,"label":"acquireArrayRawData","sortText":""},{"deprecated":false,"detail":"(function) public unsafe func acquireArrayRawData<T>(arr: Array<T>): CPointerHandle<T>","documentation":"","filterText":"acquireArrayRawData","insertText":"acquireArrayRawData<${1:T}>(${3:arr: Array<T>})","insertTextFormat":2,"kind":2,"label":"acquireArrayRawData<T>(arr: Array<T>)","sortText":""},{"deprecated":false,"detail":"(variable) let howManyHours: Int64 = match (r1) {\n    case Year => 365 * 24\n    case Month => 30 * 24\n    case Day => 24\n    case Hour1 => 1\n}","documentation":"","filterText":"howManyHours","insertText":"howManyHours","insertTextFormat":1,"kind":6,"label":"howManyHours","sortText":""},{"deprecated":false,"detail":"","documentation":"","filterText":"releaseArrayRawData","insertText":"releaseArrayRawData","insertTextFormat":1,"kind":2,"label":"releaseArrayRawData","sortText":""},{"deprecated":false,"detail":"(function) public unsafe func releaseArrayRawData<T>(handle: CPointerHandle<T>): Unit","documentation":"","filterText":"releaseArrayRawData","insertText":"releaseArrayRawData<${1:T}>(${3:handle: CPointerHandle<T>})","insertTextFormat":2,"kind":2,"label":"releaseArrayRawData<T>(handle: CPointerHandle<T>)","sortText":""},{"deprecated":false,"detail":"","documentation":"","filterText":"VArray","insertText":"VArray","insertTextFormat":1,"kind":14,"label":"VArray","sortText":""},{"deprecated":false,"detail":"","documentation":"","filterText":"type","insertText":"type","insertTextFormat":1,"kind":14,"label":"type","sortText":""},{"deprecated":false,"detail":"","documentation":"","filterText":"try","insertText":"try","insertTextFormat":1,"kind":14,"label":"try","sortText":""},{"deprecated":false,"detail":"","documentation":"","filterText":"finally","insertText":"finally","insertTextFormat":1,"kind":14,"label":"finally","sortText":""},{"deprecated":false,"detail":"","documentation":"","filterText":"synchronized","insertText":"synchronized","insertTextFormat":1,"kind":14,"label":"synchronized","sortText":""},{"deprecated":false,"detail":"try {}","documentation":"","filterText":"try","insertText":"try {\n\t$0\n}","insertTextFormat":2,"kind":14,"label":"try {}","sortText":""},{"deprecated":false,"detail":"finally {}","documentation":"","filterText":"finally","insertText":"finally {\n\t$0\n}","insertTextFormat":2,"kind":14,"label":"finally {}","sortText":""},{"deprecated":false,"detail":"type newName = originalName","documentation":"","filterText":"type","insertText":"type ${1:newName}  = ${0:originalName}","insertTextFormat":2,"kind":14,"label":"type newName = originalName","sortText":""},{"deprecated":false,"detail":"VArray<T, $IntLiteral>","documentation":"","filterText":"VArray","insertText":"VArray<${1:T}, $${2:IntLiteral}>","insertTextFormat":2,"kind":14,"label":"VArray<T, $IntLiteral>","sortText":""},{"deprecated":false,"detail":"VArray<T, $IntLiteral>(initElement: (Int64) -> T)","documentation":"","filterText":"VArray","insertText":"VArray<${1:T}, $${2:IntLiteral}>(${0:initElement: (Int64) -> T})","insertTextFormat":2,"kind":14,"label":"VArray<T, $IntLiteral>(initElement: (Int64) -> T)","sortText":""},{"deprecated":false,"detail":"VArray<T, $IntLiteral>(repeat!: T)","documentation":"","filterText":"VArray","insertText":"VArray<${1:T}, $${2:IntLiteral}>(repeat: ${0:T})","insertTextFormat":2,"kind":14,"label":"VArray<T, $IntLiteral>(repeat!: T)","sortText":""}]}