// Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
// This source file is part of the Cangjie project, licensed under Apache-2.0
// with Runtime Library Exception.
//
// See https://cangjie-lang.cn/pages/LICENSE for license information.

// The Cangjie API is in Beta. For details on its capabilities and limitations, please refer to the README file.
trait Num21 {
    func plus1(a: This, b: This): This
}

trait Num22 {
    func self1(a: This): This
}

append int32 with Num21 ,Num22 {
    func plus1(a: int32, b: int32): int32 { a + b }
    func self1(a: int32): int32 { a + 1 }
}

func run1(): int64 {
    let x: int32  = plus1(1,1)
    let y: int32  = self1(1)
    if ( x == y ) {
        return 0
    }
    return 1
}

enum TimeUnit1 {
    Year | Month | Day | Hour 
}

func test_enum():int32{
    var e = TimeUnit1.Day
    var f:TimeUnit1 = .Day
    return 1
}

open class A11 {
    public var publicAvar:int32 = 1
    protected var protectedAvar:int32 = 1
    private var privateAvar:int32 = 1
    static var staticAvar:int32 = 1
    init() {}
    init(a: int32) {
        this.publicAvar = a
        
    }

    public func publicAfunc(a: int32){
        return a + this.publicAvar
    }

    protected func protectedAfunc(a: int32, b: int32){
        return a + b + this.publicAvar
    }

    private func privateAfunc(a: int32, b: int32){
        return a + b + this.privateAvar
    }
    static func staticAfunc(a: int32, b: int32){
        return a + b
    }

    open func publicAfunc(a: int32, b: int32) {
        return a + b
    }

    func publicAadd(a: int32) {
        return a + 100
    }
}

class B11 <: A11 {
    public var publicBvar:int32 = 1
    protected var protectedBvar:int32 = 1
    private var privateBvar:int32 = 1
    static var staticBvar:int32 = 1

    public func publicBfunc(a: int32){
        return a + this.publicAvar
    }

    protected func protectedBfunc(a: int32, b: int32){
        return a + b + this.publicAvar
    }

    private func privateBfunc(a: int32, b: int32){
        return a + b + this.protectedBvar
    }
    static func staticBfunc(a: int32, b: int32){
        return a + b
    }

    open func publicBfunc(a: int32, b: int32) {
        return a + b + this.privateBvar
    }

    func publicBadd(a: int32) {
        return a + 100
    }
    init(a: int32) {
        this.publicBvar = super.protectedAvar
    }

    override func publicAfunc(a: int32, b: int32){
        return a + b + super.publicAadd(1)
    }
}

func test_11(){
    var valueB:B11 = B11(1)
    var valueA:A11 = A11(1)
    var a = valueA.publicAadd(1)
    var a1 = A11.staticAfunc(1,2)
    var b = valueB.publicAfunc(1)
    var b1 = valueB.publicBfunc(1,2)
    var b3 = B11.staticBfunc(1,2)
 }

 func arith_test(): int64 {
    var a: int16 = 127 + 128
    var b: int16 = 127 - 128
    var c: int16 = 128 / 16
    var d: int16 = 128 % 12
    var e: int16 = 127 * 128
    var a2: int16 = 8
    var a3: int16 = -8
    var a4:int16 = ~10
    var a5:int16 = 10 << 1
    var a6:int16 = 10 >> 1
    var a7:int16 = 10 & 15
    var a8:int16 = 10 ^ 15
    var a9:int16 = 10 | 15

    return 0
}

func documentHighlight_test003(): int64 {
    let tuplePIE: float32*String = (3.14, "PIE")
    let s2 : String = "Hello Char Lang"
    let s3 : String = """
                      Hello Char Lang
                      aaaaa
                      bbbbb
                      ccccc"""
    let mapSeven = 0...4
    for k in mapSeven {
        var a:int64 = k   
    }
    return 1
}

open class A09 {
    public var publicAvar:int32 = 1
    protected var protectedAvar:int32 = 1
    private var privateAvar:int32 = 1
    static var staticAvar:int32 = 1

    init() {}
    init(a: int32) {
        this.publicAvar = a
        
    }

    public func publicAfunc(a: int32){
        return a + this.publicAvar
    }

    protected func protectedAfunc(a: int32, b: int32){
        return a + b + this.publicAvar
    }

    private func privateAfunc(a: int32, b: int32){
        return a + b + this.privateAvar
    }
    static func staticAfunc(a: int32, b: int32){
        return a + b
    }

    open func publicAfunc(a: int32, b: int32) {
        return a + b
    }

    func publicAadd(a: int32) {
        return a + 100
    }
}

class B09 <: A09 {
    public var publicBvar:int32 = 1
    protected var protectedBvar:int32 = 1
    private var privateBvar:int32 = 1
    static var staticBvar:int32 = 1

    public func publicBfunc(a: int32){
        return a + this.publicAvar
    }

    protected func protectedBfunc(a: int32, b: int32){
        return a + b + this.publicAvar
    }

    private func privateBfunc(a: int32, b: int32){
        return a + b + this.protectedBvar
    }
    static func staticBfunc(a: int32, b: int32){
        return a + b
    }

    open func publicBfunc(a: int32, b: int32) {
        return a + b + this.privateBvar
    }

    func publicBadd(a: int32) {
        return a + 100
    }
    init(a: int32) {
        this.publicBvar = super.protectedAvar
    }

    override func publicAfunc(a: int32, b: int32){
        return a + b + super.publicAadd(1)
    }
}

func test_09(){
    var valueB:B09 = B09(1)
    var valueA:A09 = A09(1)
    var a = valueA.publicAvar
    var a1 = A09.staticAvar
    var b = valueB.publicAvar
    var b1 = valueB.publicBvar
    var b3 = B09.staticBvar
 }

 open class A10 {
    public var publicAvar:int32 = 1
    protected var protectedAvar:int32 = 1
    private var privateAvar:int32 = 1
    static var staticAvar:int32 = 1

    init() {}
    init(a: int32) {
        this.publicAvar = a
        
    }

    public func publicAfunc(a: int32){
        return a + this.publicAvar
    }

    protected func protectedAfunc(a: int32, b: int32){
        return a + b + this.publicAvar
    }

    private func privateAfunc(a: int32, b: int32){
        return a + b + this.privateAvar
    }
    static func staticAfunc(a: int32, b: int32){
        return a + b
    }

    open func publicAfunc(a: int32, b: int32) {
        return a + b
    }

    func publicAadd(a: int32) {
        return a + 100
    }
}

class B10 <: A10 {
    public var publicBvar:int32 = 1
    protected var protectedBvar:int32 = 1
    private var privateBvar:int32 = 1
    static var staticBvar:int32 = 1

    public func publicBfunc(a: int32){
        return a + this.publicAvar
    }

    protected func protectedBfunc(a: int32, b: int32){
        return a + b + this.publicAvar
    }

    private func privateBfunc(a: int32, b: int32){
        return a + b + this.protectedBvar
    }
    static func staticBfunc(a: int32, b: int32){
        return a + b
    }

    open func publicBfunc(a: int32, b: int32) {
        return a + b + this.privateBvar
    }

    func publicBadd(a: int32) {
        return a + 100
    }
    init(a: int32) {
        this.publicBvar = super.protectedAvar
    }

    override func publicAfunc(a: int32, b: int32){
        return a + b + super.publicAadd(1)
    }
}

func test_10(){
    var valueB:B10 = B10(1)
    var valueA:A10 = A10(1)
    var a = valueA.publicAvar
    var a1 = A10.staticAvar
    var b = valueB.publicAvar
    var b1 = valueB.publicBvar
    var b3 = B10.staticBvar
 }

 open class A111 {
    public var publicAvar:int32 = 1
    protected var protectedAvar:int32 = 1
    private var privateAvar:int32 = 1
    static var staticAvar:int32 = 1

    init() {}
    init(a: int32) {
        this.publicAvar = a
        
    }

    public func publicAfunc(a: int32){
        return a + this.publicAvar
    }

    protected func protectedAfunc(a: int32, b: int32){
        return a + b + this.publicAvar
    }

    private func privateAfunc(a: int32, b: int32){
        return a + b + this.privateAvar
    }
    static func staticAfunc(a: int32, b: int32){
        return a + b
    }

    open func publicAfunc(a: int32, b: int32) {
        return a + b
    }

    func publicAadd(a: int32) {
        return a + 100
    }
}

class B111 <: A111 {
    public var publicBvar:int32 = 1
    protected var protectedBvar:int32 = 1
    private var privateBvar:int32 = 1
    static var staticBvar:int32 = 1

    public func publicBfunc(a: int32){
        return a + this.publicAvar
    }

    protected func protectedBfunc(a: int32, b: int32){
        return a + b + this.publicAvar
    }

    private func privateBfunc(a: int32, b: int32){
        return a + b + this.protectedBvar
    }
    static func staticBfunc(a: int32, b: int32){
        return a + b
    }

    open func publicBfunc(a: int32, b: int32) {
        return a + b + this.privateBvar
    }

    func publicBadd(a: int32) {
        return a + 100
    }
    init(a: int32) {
        this.publicBvar = super.protectedAvar
    }

    override func publicAfunc(a: int32, b: int32){
        return a + b + super.publicAadd(1)
    }
}

func test_111(){
    var valueB:B111 = B111(1)
    var valueA:A111 = A111(1)
    var a = valueA.publicAadd(1)
    var a1 = A111.staticAfunc(1,2)
    var b = valueB.publicAfunc(1)
    var b1 = valueB.publicBfunc(1,2)
    var b3 = B111.staticBfunc(1,2)
 }

 open class AA {
    public var publicAvar:int32 = 1
    init(a: int32) {
        this.publicAvar = a   
    }

    init() {
        this.publicAvar = 100
    }

    init(a: int32, b: int32) {
        this.publicAvar = a + b
    }

    public func publicAAAfunc(a: int32){
        return a
    }

    public func publicAAAfunc(a: int32, b: int32){
        return a + b
    }

    public func publicAAAfunc(){
        return 100
    }
}

func test_AA(){
    var valueA:AA = AA(1)
 }

 open class AAA14 {
    public var publicAvar:int32 = 1
    init(a: int32) {
        this.publicAvar = a   
    }

    init() {
        this.publicAvar = 100
    }

    init(a: int32, b: int32) {
        this.publicAvar = a + b
    }

    public func publicAAAfunc(a: int32){
        return a
    }

    public func publicAAAfunc(a: int32, b: int32){
        return a + b
    }

    public func publicAAAfunc(){
        return 100
    }
}

func test_AAA(){
    var valueA:AAA14 = AAA14(1)
    var valueB:AAA14 = AAA14()
    var valueC:AAA14 = AAA14(1,2)
 }

 open class AAAA {
    public var publicAvar:int32 = 1
    init(a: int32) {
        this.publicAvar = a   
    }

    init() {
        this.publicAvar = 100
    }

    init(a: int32, b: int32) {
        this.publicAvar = a + b
    }

    public func publicAAAfunc(a: int32){
        return a
    }

    public func publicAAAfunc(a: int32, b: int32){
        return a + b
    }

    public func publicAAAfunc(){
        return 100
    }
}

func test_AAAA()(){
    var valueA:AAAA = AAAA(1)
    var a = valueA.publicAAAfunc()
    var b = valueA.publicAAAfunc(1)
    var c = valueA.publicAAAfunc(1,2)
 }

 abstract class BaseAbs {
	func getA() : int32
	static func getB() : int32 {
		return 2
	}
	func getC() : int32 {
		return 100
	}
}

class DataAbs <: BaseAbs {
	public func getA() : int32 {
		return BaseAbs.getB() + 1
	}
}

func run_abs(): int32 {
	var value : DataAbs = DataAbs()
	if  value.getA() != 3 {
		return 1
	}
	if  BaseAbs.getB() != 2 {
		return 2
	}
	var a = value.getC()
	return 0
}

open class AAAAA {
    public var publicAvar:int32 = 1
    init(a: int32) {
        this.publicAvar = a   
    }

    init() {
        this.publicAvar = 100
    }

    init(a: int32, b: int32) {
        this.publicAvar = a + b
    }

    public func publicAAAfunc(a: int32){
        return a
    }

    public func publicAAAfunc(a: int32, b: int32){
        return a + b
    }

    open public func publicAAAfunc(){
        return 100
    }
}
class BBBBB <: AAAAA {
    public var publicBvar:int32 = 1
    init() {
        super(1)
        this.publicBvar = super.publicAvar   
    }

    public func publicBBBfunc(){
        return super.publicAAAfunc(1,2)
    }

    override public func publicAAAfunc(){
        return 100
    }
}

func test_BBBBB():int32 {
    var value:BBBBB = BBBBB()
    var a = value.publicAAAfunc()
    var b = value.publicAAAfunc(1)
    var d = value.publicAvar
    var e = value.publicBvar
    return 1
}

open class AAAAAA {
    public var publicAvar:int32 = 1
    init(a: int32) {
        this.publicAvar = a   
    }

    init() {
        this.publicAvar = 100
    }

    init(a: int32, b: int32) {
        this.publicAvar = a + b
    }

    public func publicAAAfunc(a: int32){
        return a
    }

    public func publicAAAfunc(a: int32, b: int32){
        return a + b
    }

    public func publicAAAfunc(){
        return 100
    }
}
class BBBBBB <: AAAAAA {
    public var publicBvar:int32 = 1
    init() {
        super(1)
        this.publicBvar = super.publicAvar   
    }

    public func publicBBBfunc(){
        return super.publicAAAfunc(1,2)
    }

}

open class AAAAAAA {
    public var publicAvar:int32 = 1
    init(a: int32) {
        this.publicAvar = a   
    }

    init() {
        this.publicAvar = 100
    }

    init(a: int32, b: int32) {
        this.publicAvar = a + b
    }

    public func publicAAAfunc(a: int32){
        return a
    }

    public func publicAAAfunc(a: int32, b: int32){
        return a + b
    }

    open public func publicAAAfunc(){
        return 100
    }
}
class BBBBBBB <: AAAAAAA {
    public var publicBvar:int32 = 1
    init() {
        super(1)
        this.publicBvar = super.publicAvar   
    }

    public func publicBBBfunc(){
        return super.publicAAAfunc(1,2)
    }

    override public func publicAAAfunc(){
        return 100
    }
}

func test_BBBBBBB():int32 {
    var value:BBBBBBB = BBBBBBB()
    var a = value.publicAAAfunc()
    return 1
}

interface I19 {
    let aclass: int32 = 1
    func getNum():int32 {
        return 1
    }
    
    static func getSum():int32 {
        return 1
    }
}

class Base149 <: I19 {
    static var classa = 1
    static var Class = 2
	var a:int32 = 3
    init() {
        this.a = I19.aclass
    }
    init(a: int32) {
        this.a = a
    }
    static func add(a: int32, b: int32):int32 {
        return a + b
    }
    static func add():int32 {
        return I19.getSum()
    }

    func add(a:int32):int32 {
        return I19.getSum()
    }
}

interface I20 {
    let aclass: int32 = 1
    func test_I20(a:int32):int32
}

class Base240 <: I20 {
    static var classa = 1
    static var Class = 2
	var a:int32 = 3
    init() {
        this.a = I20.aclass
    }
    init(a: int32) {
        this.a = a
    }

    func test_I20(a:int32):int32 {
        return a
    }
}

func test_Base20(){
    var value:Base240 =  Base240()
    var b = value.test_I20(100)
}

interface I21 {
    let aclass: int32 = 1
     func getNum():int32 {
        return 1
    }
    
    static func getSum():int32 {
        return 1
    }
}

class Base21 <: I21 {
    static var classa = 1
    static var Class = 2
	var a:int32 = 3
    init() {
        this.a = I21.aclass
    }
    init(a: int32) {
        this.a = a
    }
    static func add():int32 {
        return I21.getSum()
    }

    func add(a:int32):int32 {
        return getNum()
    }
}

interface I22 {
    let aclass: int32 = 1
     func getNum():int32 {
        return 1
    }
    
    static func getSum():int32 {
        return 1
    }
}

class Base22 <: I22 {
    static var classa = 1
    static var Class = 2
	var a:int32 = 3
    init() {
        this.a = I22.aclass
    }
    init(a: int32) {
        this.a = a
    }
    static func add():int32 {
        return I22.getSum()
    }

    func add(a:int32):int32 {
        return I22.getSum()
    }
}

interface I23 {
    let aclass: int32 = 1
     func getNum():int32 {
        return 1
    }
    
    static func getSum():int32 {
        return 1
    }
}

interface I23_Son <: I23 {
    override  func getNum():int32 {
        return 2
    }
}

class Base23 <: I23_Son {
    static var classa = 1
    static var Class = 2
    var a:int32 = 3
    init() {
        this.a = I23.aclass
    }
    init(a: int32) {
        this.a = a
    }
}

func test_Base23():int32 {
    var value:Base23 = Base23()
    var a = value.getNum()
    return a
}

interface I24 {
    let aclass: int32 = 1
     func getNum():int32 {
        return 1
    }
    
    static func getSum():int32 {
        return 1
    }
}

interface I2401 {
    let aa: int32 = 1
}

interface I24_Son <: I24 & I2401 {
    override  func getNum():int32 {
        return 2
    }
}

class Base24 <: I24_Son {
    static var classa = 1
    static var Class = 2
    var a:int32 = 3
    init() {
        this.a = I24.aclass + I2401.aa
    }
    init(a: int32) {
        this.a = a
    }
}

struct Test1{
    let width: int32 = 2
    let length: int32 = 5
    init(a:int32, b:int32) {
        width = a
        length = b   
    }

    func area(): int32 {
        return width * length
    }
}

func test_struct():int32{
    var a:Test1 = Test1(3,4)
    a.area()
}

func test026(): unit 
{
    let score: int32 = 90
    let PASS: int32 = 60 
    let FULL: int32 = 100 
    var scoreResult: String = match score {
        case 0 => "zero"
        case 10 | 20 | 30 | 40 | 50 => "fail"
        case $PASS => "pass"
        case 70 | 80 => "good"
        case 90 | $FULL => "excellent"
        case _ => "not a valid score" 
    }

    return
}

func test027(): unit 
{
    let score: int32 = 90
    let PASS: int32 = 60 
    let FULL: int32 = 100 
    var scoreResult: String = match score {
        case 0 => "zero"
        case 10 | 20 | 30 | 40 | 50 => "fail"
        case $PASS => "pass"
        case 70 | 80 => "good"
        case 90 | $FULL => "excellent"
        case _ => "not a valid score" 
    }

    return
}

func test028(): unit 
{
    let score: int32 = 90
    let PASS: int32 = 60 
    let FULL: int32 = 100 
    var scoreResult: String = match score {
        case 0 => "zero"
        case 10 | 20 | 30 | 40 | 50 => "fail"
        case $PASS => "pass"
        case 70 | 80 => "good"
        case 90 | $FULL => "excellent"
        case _ => "not a valid score" 
    }

    return
}

func test029(): unit 
{
    let score: int32 = 90
    let PASS: int32 = 60 
    let FULL: int32 = 100 
    var scoreResult: String = match score {
        case 0 => "zero"
        case 10 | 20 | 30 | 40 | 50 => "fail"
        case $PASS => "pass"
        case 70 | 80 => "good"
        case 90 | $FULL => "excellent"
        case _ => "not a valid score" 
    }

    return
}
func test030(): unit 
{
    let score: int32 = 90
    let PASS: int32 = 60 
    let FULL: int32 = 100 
    var scoreResult: String = match score {
        case 0 => "zero"
        case 10 | 20 | 30 | 40 | 50 => "fail"
        case $PASS => "pass"
        case 70 | 80 => "good"
        case 90 | $FULL => "excellent"
        case _ => "not a valid score" 
    }

    return
}
func test031(): unit 
{
    let score: int32 = 90
    let PASS: int32 = 60 
    let FULL: int32 = 100 
    var scoreResult: String = match score {
        case 0 => "zero"
        case 10 | 20 | 30 | 40 | 50 => "fail"
        case $PASS => "pass"
        case 70 | 80 => "good"
        case 90 | $FULL => "excellent"
        case _ => "not a valid score" 
    }

    return
}
func test032(): unit 
{
    let score: int32 = 90
    let PASS: int32 = 60 
    let FULL: int32 = 100 
    var scoreResult: String = match score {
        case 0 => "zero"
        case 10 | 20 | 30 | 40 | 50 => "fail"
        case $PASS => "pass"
        case 70 | 80 => "good"
        case 90 | $FULL => "excellent"
        case _ => "not a valid score" 
    }

    return
}
func test033(): unit 
{
    let score: int32 = 90
    let PASS: int32 = 60 
    let FULL: int32 = 100 
    var scoreResult: String = match score {
        case 0 => "zero"
        case 10 | 20 | 30 | 40 | 50 => "fail"
        case $PASS => "pass"
        case 70 | 80 => "good"
        case 90 | $FULL => "excellent"
        case _ => "not a valid score" 
    }

    return
}

