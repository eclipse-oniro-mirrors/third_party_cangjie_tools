{"caseFolder":"normalTest//ConCurrency", "id":"139"}
{"jsonrpc":"2.0","id":"1","method":"initialize","params":{"processId":null,"rootPath":"D:/code0506/ConCurrency","rootUri":"file:///d%3A/code0506/ConCurrency/","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{},"didChangeWatchedFiles":{},"symbol":{},"executeCommand":{},"workspaceFolders":false,"configuration":false},"textDocument":{"synchronization":{"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"completionItem":{"snippetSupport":true}},"hover":{},"signatureHelp":{},"references":{},"documentHighlight":{"dynamicRegistration":true},"formatting":{},"rangeFormatting":{},"onTypeFormatting":{},"definition":{},"codeAction":{},"documentLink":{},"rename":{"prepareSupport":true},"semanticHighlightingCapabilities":{"semanticHighlighting":true},"callHierarchy":{},"semanticTokens":{"tokenTypes":["namespace","type","class","enum","interface","struct","typeParameter","parameter","variable","property","enumMember","event","function","method","macro","keyword","modifier","comment","string","number","regexp","operator","member","label"],"tokenModifiers":["declaration","definition","readonly","static","deprecated","abstract","async","modification","documentation","defaultLibrary"],"dynamicRegistration":true}}}}}
{"jsonrpc":"2.0","method":"initialized","params":{}}
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///d%3A/develop/B011/Cangjie-language-server/test/testChr/normalTest/ConCurrency/src/synchronized.cj","languageId":"Cangjie","version":2,"text":"// Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.\n// This source file is part of the Cangjie project, licensed under Apache-2.0\n// with Runtime Library Exception.\n//\n// See https://cangjie-lang.cn/pages/LICENSE for license information.\n\nfrom std import sync.*\r\n \r\nclass BoundedQueue {\r\n    // Create a Mutex, two Conditions.\r\n    public let mtx : MultiConditionMonitor = MultiConditionMonitor()\r\n    public let notFull : ConditionID = mtx.newCondition()\r\n    public let notEmpty : ConditionID = mtx.newCondition()\r\n    public var aaa = mtx.newCondition()\r\n    public var count : Int64 // Object count in buffer.\r\n    public var head : Int64 // Write index.\r\n    public var tail : Int64 // Read index.\r\n    public init() {\r\n        count = 0\r\n        head = 0\r\n        tail = 0\r\n    }\r\n    public func put(x : Object) {\r\n        synchronized(mtx) {\r\n            while (count == 100) {\r\n                mtx.wait(notFull)\r\n            }\r\n            head++\r\n            if (head == 100) {\r\n                head = 0\r\n            }\r\n            count++\r\n        }\r\n        mtx.notify(notEmpty)\r\n    }\r\n    public func get() {\r\n        synchronized(mtx) {\r\n            while (count == 0) {\r\n                mtx.wait(notEmpty)\r\n            }\r\n            tail++\r\n            if (tail == 100) {\r\n            }\r\n            count--\r\n        }\r\n        mtx.notify(notFull)\r\n    }\r\n    public func test() {\r\n        synchronized(mtx1){} // error\r\n        syn\r\n    }\r\n}"}}}
{"jsonrpc":"2.0","id":"4","method":"shutdown","params":{}}
{"jsonrpc":"2.0","method":"exit","params":{}}