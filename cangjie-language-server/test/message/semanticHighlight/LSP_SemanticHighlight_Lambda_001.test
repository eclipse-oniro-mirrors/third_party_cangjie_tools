{"caseFolder":"normalTest//Lambda"}
{"jsonrpc":"2.0","id":"0","method":"initialize","params":{"processId":null,"rootPath":"C:/Users/code_project/DevEcoStudioProjects/MyApplication3","rootUri":"file:///c%3A/Users/code_project/DevEcoStudioProjects/MyApplication3/","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{},"didChangeWatchedFiles":{},"symbol":{},"executeCommand":{},"workspaceFolders":false,"configuration":false},"textDocument":{"synchronization":{"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"completionItem":{"snippetSupport":true}},"hover":{},"signatureHelp":{},"references":{},"documentHighlight":{"dynamicRegistration":true},"formatting":{},"rangeFormatting":{},"onTypeFormatting":{},"definition":{},"codeAction":{},"documentLink":{},"rename":{"prepareSupport":true},"semanticHighlightingCapabilities":{"semanticHighlighting":true},"callHierarchy":{},"semanticTokens":{"tokenTypes":["namespace","type","class","enum","interface","struct","typeParameter","parameter","variable","property","enumMember","event","function","method","macro","keyword","modifier","comment","string","number","regexp","operator","member","label"],"tokenModifiers":["declaration","definition","readonly","static","deprecated","abstract","async","modification","documentation","defaultLibrary"],"dynamicRegistration":true}}}}}
{"jsonrpc":"2.0","method":"initialized","params":{}}
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///d:/test_char/src/Lambda.cj","languageId":"Cangjie","version":0,"text":"// Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.\n// This source file is part of the Cangjie project, licensed under Apache-2.0\n// with Runtime Library Exception.\n//\n// See https://cangjie-lang.cn/pages/LICENSE for license information.\n\n\n//lamda  AR-SR-Lang-1016\n\n\n// 尾闭包  AR-SR-Lang-1016-04\n\n//当函数调用最后一个实参是 lambda 时，我们可以使用尾闭包语法，将 lambda 放在函数调用的尾部，括号外面。\nfunc f(a: Int64, fn: (Int64)->Int64) { fn(a) }\nfunc FF2( )  {\n\t f(1, { i => i * i }) // normal function call\n     f(1) { i => i * i } // trailing closures\n}\n\n//当函数调用有且只有一个 lambda 实参时，我们还可以省略 ()，只写 lambda 。\nfunc f2(fn: (Int64)->Int64) { fn(1) }\nfunc NBAME22( )  {\n\t f2{ i => i * i }\n}\n\n//需要注意的是，尾闭包语法会优先匹配非柯里化的版本\nfunc f3(fn: ()->Unit) {} // f1\nfunc f3()(fn: ()->Unit) {} // f2\nfunc NAME33( )  {\n\t f3(){} // call f3\n}\n//普通函数调用和构造函数调用都可以使用这个语法，包含 this() 和 super()。\nlet array3 = RefArray<Int64>(3) { i => i * 2 } //'array3' has 3 elememts: 0, 2, 4\n\n//lambda表达式的调用 AR-SR-Lang-1016-02\nlet f4444: (Int64, Int64)->Int64 = {a: Int64, b: Int64 => a + b}\n\nvar f5555: () -> Int32 = { => 123 }\n\nvar sum1: (Int32, Int32) -> Int32 = {a, b => a + b}\n\nvar sum2: (Int32, Int32) -> Int32 = {a: Int32, b => a + b}\nvar sum4 = {a: Int32, b:Int32 => a + b}\n\nvar display = { => print(\"Hello\") }\n\n\nfunc nametest( )  {\n     var a = { => return 1 }\n\t sum1 = {a, b => a + b}\n\t sum2 = {a, b => return a + b} // Same as that in the previous line.\n}\n\n//lamda捕獲\n\nfunc flamda() {\n        var x = 1\n        let y = 2\n\n    func g() {\n        print(\"${x}\") // OK, captured a mutable variable.\n    }\n    let b = g  // Error, g cannot be assigned to a variable\n\n    g    // Error, g cannot be used as an expression\n    g()  // OK, g can be invoked\n\n    func g2() {\n        g()        // OK, g2 also captured a mutable variable\n    }\n\n    let c = g2 // Error, g2 cannot be assigned to a variable\n\n    func h() {\n        print(\"${y}\")  // OK, captured an immutable variable.\n    }\n    let d = h    // OK, h can be assigned to variable\n\n    let e = { print(\"${x}\") }  // Error, lambda captured a mutable variable, cannot be assigned to a variable\n\n    let i = { x*x }()  // OK, lambda captured a mutable variable, can be invoked.\n    return g  // Error, g cannot be used as a return value.\n}\n/*\n捕获的局部变量必须满足以下规则：\n\n被捕获的局部变量必须在闭包定义之前声明，否则编译报错；\n变量被捕获时必须已经完成初始化，否则编译报错；\n如果函数外有变量，同时函数内有同名的局部变量，函数内的闭包因局部变量的作用域未开始而捕获了函数外的变量时，为避免用户误用，报warning；\n*/\n//需要注意的是，捕获具有传递性，如果一个函数f调用了捕获var变量的函数g，那么函数f同样捕获了var变量，此时，f也不能作为一等公民使用。\n\n// 1. The captured variable must be defined before the closure.\nlet x = 4\nfunc fnow() {\n    var outx = x   // Print 4.\n    let x = 99\n    func f1() {\n        print(\"${x}\")\n    }\n    let f2 = {\n        print(\"${x}\")\n    }\n    f1()          // Print 99.\n    f2()          // Print 99.\n}\n\n// 2. The variable must be initialized before being captured.\n\nfunc fxxx() {\n    print(\"${x}\")    // Print 4.\n    let x: Int64\n    func f1() {\n        print(\"${x}\")    // Error: x is not initialized yet.\n    }\n    x = 99\n    f1()\n}\n\n// 3. If there is a  local variable in a block, closures capture variables of the same name in the outer scope will report a warning.\n\nfunc fxxxx() {\n    print(\"${x}\")    // Print 4.\n    func f1() {\n        print(\"${x}\")\t// warning\n    }\n    let f2 = {\n        print(\"${x}\")  \t// warning\n    }\n    let x = 99\n    f1()   // print 4\n    f2()   // print 4\n}\n"}}}
{"jsonrpc":"2.0","id":9,"method":"textDocument/semanticTokens/full","params":{"textDocument":{"uri":"file:///d:/test_char/src/Lambda.cj"}}}
{"jsonrpc":"2.0","id":"4","method":"shutdown","params":{}}
{"jsonrpc":"2.0","method":"exit","params":{}}