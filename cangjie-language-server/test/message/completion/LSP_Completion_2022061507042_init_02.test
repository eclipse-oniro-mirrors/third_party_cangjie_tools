{"caseFolder":"test/2022061507042", "id":"9"}
{"jsonrpc":"2.0","id":"0","method":"initialize","params":{"processId":null,"rootPath":"C:/Users/code_project/DevEcoStudioProjects/MyApplication3","rootUri":"file:///c%3A/Users/code_project/DevEcoStudioProjects/MyApplication3/","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{},"didChangeWatchedFiles":{},"symbol":{},"executeCommand":{},"workspaceFolders":false,"configuration":false},"textDocument":{"synchronization":{"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"completionItem":{"snippetSupport":true}},"hover":{},"signatureHelp":{},"references":{},"documentHighlight":{"dynamicRegistration":true},"formatting":{},"rangeFormatting":{},"onTypeFormatting":{},"definition":{},"codeAction":{},"documentLink":{},"rename":{"prepareSupport":true},"semanticHighlightingCapabilities":{"semanticHighlighting":true},"callHierarchy":{},"semanticTokens":{"tokenTypes":["namespace","type","class","enum","interface","struct","typeParameter","parameter","variable","property","enumMember","event","function","method","macro","keyword","modifier","comment","string","number","regexp","operator","member","label"],"tokenModifiers":["declaration","definition","readonly","static","deprecated","abstract","async","modification","documentation","defaultLibrary"],"dynamicRegistration":true}}}}}
{"jsonrpc":"2.0","method":"initialized","params":{}}
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///d:/test_char/src/modifier.cj","languageId":"Cangjie","version":1,"text":"// Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.\n// This source file is part of the Cangjie project, licensed under Apache-2.0\n// with Runtime Library Exception.\n//\n// See https://cangjie-lang.cn/pages/LICENSE for license information.\n\npackage pkg_modi\n\nopen public class ModifierA{\n    init(deMoA:Int64){\n        var dMA:Int64 = deMoA\n        for (i in 0..5){\n           dMA +=1\n        }\n    }\n    \n    public init(puMoA:Int64,puMoB:Int64){\n        var pMA : Int64 = puMoA\n        var pMB : Int64 = puMoB\n        for (i in 0..5){\n            if (i < 2){\n                pMA +=2\n                continue\n            }else if (i == 3){\n                pMB -=1\n                break\n            }\n        }\n    }\n\n    private init(priMoA:Int64,priMoB:Int64,priMoC:Int64){\n        var prA: Int64 = priMoA\n        var prB: Int64 = priMoB\n        var prC: Int64 = priMoC\n        if (prA+prB+prC == 0){\n            prA +=1\n            prB +=2\n            prC +=3\n        }else if(prA+prB+prC < 0){\n            prA +=10\n            prB +=20\n            prC +=30\n        }\n    }\n\n    protected init(proMoA:Int64,proMoB:Int64,proMoC:Int64,proMoD:Int64){\n        // var proA: Int64 = proMoA\n        // var proB: Int64 = proMoB\n        // var proC: Int64 = proMoC\n        // var proD: Int64 = proMoD\n        // do{\n        //     proA = proB + proC + proD + 1\n        //     continue\n        //     if (proA % 3 == 0) {\n        //         break\n        //     }\n        // }while (proA > 0)\n    }\n\n    func MofuncA(deMoA:Int64){\n        var dMA:Int64 = deMoA\n        for (i in 0..5){\n           dMA +=1\n        }\n        return dMA - deMoA\n    }\n    public func MofuncB(puMoA:Int64,puMoB:Int64){\n        var pMA : Int64 = puMoA\n        var pMB : Int64 = puMoB\n        for (i in 0..5){\n            if (i < 2){\n                pMA +=2\n                continue\n            }else if (i == 3){\n                pMB -=1\n                break\n            }\n        }\n        return pMA + pMB - puMoA - puMoB\n    }\n    private func MofuncC(priMoA:Int64,priMoB:Int64,priMoC:Int64){\n        var prA: Int64 = priMoA\n        var prB: Int64 = priMoB\n        var prC: Int64 = priMoC\n        if (prA+prB+prC == 0){\n            prA +=1\n            prB +=2\n            prC +=3\n        }else if(prA+prB+prC < 0){\n            prA +=10\n            prB +=20\n            prC +=30\n        }\n        return prA + prB + prC - priMoA - priMoB - priMoC\n    }\n    protected func MofuncD(proMoA:Int64,proMoB:Int64,proMoC:Int64,proMoD:Int64){\n        var proA: Int64 = proMoA\n        var proB: Int64 = proMoB\n        var proC: Int64 = proMoC\n        var proD: Int64 = proMoD\n        do{\n            proA = proB + proC + proD + 1\n            continue\n            if (proA % 3 == 0) {\n                break\n            }\n        }while (proA > 0)\n        return proA\n    }\n\n    static func s_MofuncA(deMoA:Int64){\n        var dMA:Int64 = deMoA\n        for (i in 0..5){\n           dMA +=1\n        }\n        return dMA - deMoA\n    }\n    static public func s_MofuncB(puMoA:Int64,puMoB:Int64){\n        var pMA : Int64 = puMoA\n        var pMB : Int64 = puMoB\n        for (i in 0..5){\n            if (i < 2){\n                pMA +=2\n                continue\n            }else if (i == 3){\n                pMB -=1\n                break\n            }\n        }\n        return pMA + pMB - puMoA - puMoB\n    }\n    static private func s_MofuncC(priMoA:Int64,priMoB:Int64,priMoC:Int64){\n        var prA: Int64 = priMoA\n        var prB: Int64 = priMoB\n        var prC: Int64 = priMoC\n        if (prA+prB+prC == 0){\n            prA +=1\n            prB +=2\n            prC +=3\n        }else if(prA+prB+prC < 0){\n            prA +=10\n            prB +=20\n            prC +=30\n        }\n        return prA + prB + prC - priMoA - priMoB - priMoC\n    }\n    static protected func s_MofuncD(proMoA:Int64,proMoB:Int64,proMoC:Int64,proMoD:Int64){\n        var proA: Int64 = proMoA\n        var proB: Int64 = proMoB\n        var proC: Int64 = proMoC\n        var proD: Int64 = proMoD\n        do{\n            proA = proB + proC + proD + 1\n            continue\n            if (proA % 3 == 0) {\n                break\n            }\n        }while (proA > 0)\n        return proA\n    }\n\n    // // private测试\n    let init_default_1 = ModifierA  //同一作用域 private default public protected\n    let init_public_1 = ModifierA  //同一作用域 private default public protected\n    let init_protect_1 = ModifierA  //同一作用域 private default public protected\n    let init_private_1 = ModifierA   //同一作用域 private default public protected\n    let func_private = init_public. //同一作用域 private default public protected\n}\n\nopen public class ModifierB <: ModifierA{\n    init (deMoA:Int64){\n        super(deMoA)\n    }\n    // 测试\n    // let init_1 = ModifierA ////父类中的private无法被扩展\n    // let fun_1 = init_1.  //父类中的private无法被扩展\n    // let s_func_1 = ModifierA. ////父类中的private无法被扩展\n}\n\npublic class ModifierC <: ModifierB{\n    init (deMoA:Int64){\n        super(deMoA)\n        \n    }\n\n    // 测试\n    let init_1 = ModifierA ////父类中的private无法被扩展\n    let fun_1 = init_1.  //父类中的private无法被扩展\n    let s_func_1 = ModifierA. ////父类中的private无法被扩展\n}\n\n// 构造函数\n\nlet init_default = ModifierA\nlet init_public = ModifierA(1,-2)\nlet init_private = ModifierA(1,-2,3)\nlet init_protect = ModifierA(1,-2,3,-4)\n\n\n// 一般成员函数 场景\nlet func_default = init_public.MofuncA(1)\nlet func_public = init_public.MofuncB(1,-2)\nlet func_private = init_public.MofuncC(1,-2,3)\nlet func_protect = init_public.MofuncD(1,-2,3,-4)\n\n//本包静态\nlet func_default_s = ModifierA.s_MofuncA(1)\nlet func_public_s = ModifierA.s_MofuncB(1,-2)\nlet func_private_s = ModifierA.s_MofuncC(1,-2,3)\nlet func_protect_s = ModifierA.s_MofuncD(1,-2,3,-4)\n\n// 本包的 继承类的场景\nlet inherPkg_init_default = ModifierB(2)\n\nlet inherPkg_default = inherPkg_init_default.MofuncA(1)\nlet inherPkg_public = inherPkg_init_default.MofuncB(1,-2)\nlet inherPkg_private = inherPkg_init_default.MofuncC(1,-2,3)\nlet inherPkg_protected = inherPkg_init_default.MofuncD(1,-2,3,-4)\n\n//本包继承静态\nlet ModifierB_default_s = ModifierB.s_MofuncA(1)\nlet ModifierB_public_s = ModifierB.s_MofuncB(1,-2)\nlet ModifierB_private_s = ModifierB.s_MofuncC(1,-2,3)\nlet ModifierB_protect_s = ModifierB.s_MofuncD(1,-2,3,-4)\n\n//本包深度继承静态\nlet ModifierC_default_s = ModifierC.s_MofuncA(1)\nlet ModifierC_public_s = ModifierC.s_MofuncB(1,-2)\nlet ModifierC_private_s = ModifierC.s_MofuncC(1,-2,3)\nlet ModifierC_protect_s = ModifierC.s_MofuncD(1,-2,3,-4)\n\n// 本包的 深层继承类的场景\nlet inherPkg_init_default_deep = ModifierC(3)\n\nlet inherPkg_default_deep = ModifierC(3).MofuncA(1)\nlet inherPkg_public_deep = ModifierC(3).MofuncB(1,-2)\nlet inherPkg_private_deep = ModifierC(3).MofuncC(1,-2,3)\nlet inherPkg_protected_deep = ModifierC(3).MofuncD(1,-2,3,-4)\n\n//测试\n\nlet t1 = ModifierA.   //portect public default\nlet t2 = ModifierA(1).  //portect public default\nlet t3 = ModifierB.  //portect public default\nlet t4 = ModifierB(1).   //portect public default\nlet t5 = ModifierC.   //portect public default\n\n"}}}
{"jsonrpc":"2.0","id":"9","method":"textDocument/completion","params":{"textDocument":{"uri":"file:///d:/test_char/src/modifier.cj"},"position":{"line":17,"character":28}}}
{"jsonrpc":"2.0","id":"4","method":"shutdown","params":{}}
{"jsonrpc":"2.0","method":"exit","params":{}}