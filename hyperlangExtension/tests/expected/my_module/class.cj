// Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
// This source file is part of the Cangjie project, licensed under Apache-2.0
// with Runtime Library Exception.
//
// See https://cangjie-lang.cn/pages/LICENSE for license information.

// The Cangjie API is in Beta. For details on its capabilities and limitations, please refer to the README file.

package my_module

import ohos.ark_interop.*
import ohos.ark_interop_helper.*
import ohos.base.*

/*class ExportKeyword DeclareKeyword TDDiagBuilder {
    StaticKeywordReadonlyKeywordPLATFORM_OA: number = 0;
    StaticKeywordReadonlyKeywordPLATFORM_PRO: number = 3;
    appId: String;
    appKey: String;
    appVersion: String;
    platform: number;
    loggerAdapter: LoggerAdapter | null | undefined;
    xgTrafficQuota: number;
    platform: String | null;
    crashListener: ICrashListener | null;
    logUploadListener?: LogUploadListener;
    initiativeUploadWhiteListTags?: Array<String>;
    constructor(): void
    }*/

public class TDDiagBuilder {
    
    protected TDDiagBuilder(var arkts_object: JSObject) {}
    /**
	 * @brief constructor(): void
	 */
    public init() {
        arkts_object = checkThreadAndCall < JSObject >(getMainContext()) {
            __ctx =>
            let clazz = getClassConstructorObj("cases_class", "TDDiagBuilder").asClass(__ctx)
            clazz.new().asObject()
        }
    }
    
    public static prop PLATFORM_OA: Float64 {
        get() {
            checkThreadAndCall < Float64 >(getMainContext()) {
                ctx: JSContext => Float64.fromJSValue(ctx, getClassConstructorObj("my_module_class", "TDDiagBuilder")["PLATFORM_OA"])
            }
        }
    }
    
    public static prop PLATFORM_PRO: Float64 {
        get() {
            checkThreadAndCall < Float64 >(getMainContext()) {
                ctx: JSContext => Float64.fromJSValue(ctx, getClassConstructorObj("my_module_class", "TDDiagBuilder")["PLATFORM_PRO"])
            }
        }
    }
    
    public mut prop appId: String {
        get() {
            checkThreadAndCall < String >(getMainContext()) {
                ctx: JSContext => String.fromJSValue(ctx, arkts_object["appId"])
            }
        }
        set(v) {
            checkThreadAndCall < Unit >(getMainContext()) {
                ctx: JSContext => arkts_object["appId"] = v.toJSValue(ctx)
            }
        }
        
    }
    
    public mut prop appKey: String {
        get() {
            checkThreadAndCall < String >(getMainContext()) {
                ctx: JSContext => String.fromJSValue(ctx, arkts_object["appKey"])
            }
        }
        set(v) {
            checkThreadAndCall < Unit >(getMainContext()) {
                ctx: JSContext => arkts_object["appKey"] = v.toJSValue(ctx)
            }
        }
        
    }
    
    public mut prop appVersion: String {
        get() {
            checkThreadAndCall < String >(getMainContext()) {
                ctx: JSContext => String.fromJSValue(ctx, arkts_object["appVersion"])
            }
        }
        set(v) {
            checkThreadAndCall < Unit >(getMainContext()) {
                ctx: JSContext => arkts_object["appVersion"] = v.toJSValue(ctx)
            }
        }
        
    }
    
    public mut prop platform: Float64 {
        get() {
            checkThreadAndCall < Float64 >(getMainContext()) {
                ctx: JSContext => Float64.fromJSValue(ctx, arkts_object["platform"])
            }
        }
        set(v) {
            checkThreadAndCall < Unit >(getMainContext()) {
                ctx: JSContext => arkts_object["platform"] = v.toJSValue(ctx)
            }
        }
        
    }
    
    public mut prop loggerAdapter: Option<LoggerAdapter> {
        get() {
            checkThreadAndCall < Option<LoggerAdapter> >(getMainContext()) {
                ctx: JSContext => Option < LoggerAdapter >.fromJSValue(ctx, arkts_object["loggerAdapter"])
            }
        }
        set(v) {
            checkThreadAndCall < Unit >(getMainContext()) {
                ctx: JSContext => arkts_object["loggerAdapter"] = v.toJSValue(ctx)
            }
        }
        
    }
    
    public mut prop xgTrafficQuota: Float64 {
        get() {
            checkThreadAndCall < Float64 >(getMainContext()) {
                ctx: JSContext => Float64.fromJSValue(ctx, arkts_object["xgTrafficQuota"])
            }
        }
        set(v) {
            checkThreadAndCall < Unit >(getMainContext()) {
                ctx: JSContext => arkts_object["xgTrafficQuota"] = v.toJSValue(ctx)
            }
        }
        
    }
    
    public mut prop platform: Option<String> {
        get() {
            checkThreadAndCall < Option<String> >(getMainContext()) {
                ctx: JSContext => Option < String >.fromJSValue(ctx, arkts_object["platform"])
            }
        }
        set(v) {
            checkThreadAndCall < Unit >(getMainContext()) {
                ctx: JSContext => arkts_object["platform"] = v.toJSValue(ctx)
            }
        }
        
    }
    
    public mut prop crashListener: Option<JSValue/* FIXME: `ICrashListener` */> {
        get() {
            checkThreadAndCall < Option<JSValue/* FIXME: `ICrashListener` */> >(getMainContext()) {
                ctx: JSContext => arkts_object["crashListener"]
            }
        }
        set(v) {
            checkThreadAndCall < Unit >(getMainContext()) {
                ctx: JSContext => arkts_object["crashListener"] = v.getOrDefault({ => ctx.object().toJSValue() })
            }
        }
        
    }
    
    public mut prop logUploadListener: ?JSValue/* FIXME: `LogUploadListener` */ {
        get() {
            checkThreadAndCall < ?JSValue/* FIXME: `LogUploadListener` */ >(getMainContext()) {
                ctx: JSContext => arkts_object["logUploadListener"]
            }
        }
        set(v) {
            checkThreadAndCall < Unit >(getMainContext()) {
                ctx: JSContext => arkts_object["logUploadListener"] = v.getOrDefault({ => ctx.object().toJSValue() })
            }
        }
        
    }
    
    public mut prop initiativeUploadWhiteListTags: ?Array<String> {
        get() {
            checkThreadAndCall < ?Array<String> >(getMainContext()) {
                ctx: JSContext => fromJSArrayOption < String >(ctx, arkts_object["initiativeUploadWhiteListTags"])
            }
        }
        set(v) {
            checkThreadAndCall < Unit >(getMainContext()) {
                ctx: JSContext => arkts_object["initiativeUploadWhiteListTags"] = toJSArray < String >(ctx, v)
            }
        }
        
    }
    
    
    func toJSValue(context: JSContext): JSValue {
        arkts_object.toJSValue()
    }
    
    static func fromJSValue(context: JSContext, input: JSValue): TDDiagBuilder {
        TDDiagBuilder(input.asObject())
    }
}

/*class ExportKeyword DeclareKeyword d10 {
    getInstance(): d10
    putSync(key: string, value: number | string | boolean | Array<number> | Array<string> | Array<boolean>): d10
    }*/

public class d10 {
    
    protected d10(var arkts_object: JSObject) {}
    
    
    /**
	 * @brief getInstance(): d10
	 */
    public static func getInstance(): d10 {
        jsObjApiCall < d10 >(getClassConstructorObj("my_module_class", "d10"),  "getInstance", emptyArg) {
            ctx, info => d10.fromJSValue(ctx, info)
        }
    }
    /**
	 * @brief putSync(key: string, value: number | string | boolean | Array<number> | Array<string> | Array<boolean>): d10
	 */
    public func putSync(key: String, value: Float64): d10 {
        jsObjApiCall < d10 >( arkts_object, "putSync", { ctx =>[key.toJSValue(ctx), value.toJSValue(ctx)] }) {
            ctx, info => d10.fromJSValue(ctx, info)
        }
    }
    /**
	 * @brief putSync(key: string, value: number | string | boolean | Array<number> | Array<string> | Array<boolean>): d10
	 */
    public func putSync(key: String, value: String): d10 {
        jsObjApiCall < d10 >( arkts_object, "putSync", { ctx =>[key.toJSValue(ctx), value.toJSValue(ctx)] }) {
            ctx, info => d10.fromJSValue(ctx, info)
        }
    }
    /**
	 * @brief putSync(key: string, value: number | string | boolean | Array<number> | Array<string> | Array<boolean>): d10
	 */
    public func putSync(key: String, value: Bool): d10 {
        jsObjApiCall < d10 >( arkts_object, "putSync", { ctx =>[key.toJSValue(ctx), value.toJSValue(ctx)] }) {
            ctx, info => d10.fromJSValue(ctx, info)
        }
    }
    /**
	 * @brief putSync(key: string, value: number | string | boolean | Array<number> | Array<string> | Array<boolean>): d10
	 */
    public func putSync(key: String, value: Array<Float64>): d10 {
        jsObjApiCall < d10 >( arkts_object, "putSync", { ctx =>[key.toJSValue(ctx), toJSArray < Float64 >(ctx, value)] }) {
            ctx, info => d10.fromJSValue(ctx, info)
        }
    }
    /**
	 * @brief putSync(key: string, value: number | string | boolean | Array<number> | Array<string> | Array<boolean>): d10
	 */
    public func putSync(key: String, value: Array<String>): d10 {
        jsObjApiCall < d10 >( arkts_object, "putSync", { ctx =>[key.toJSValue(ctx), toJSArray < String >(ctx, value)] }) {
            ctx, info => d10.fromJSValue(ctx, info)
        }
    }
    /**
	 * @brief putSync(key: string, value: number | string | boolean | Array<number> | Array<string> | Array<boolean>): d10
	 */
    public func putSync(key: String, value: Array<Bool>): d10 {
        jsObjApiCall < d10 >( arkts_object, "putSync", { ctx =>[key.toJSValue(ctx), toJSArray < Bool >(ctx, value)] }) {
            ctx, info => d10.fromJSValue(ctx, info)
        }
    }
    
    func toJSValue(context: JSContext): JSValue {
        arkts_object.toJSValue()
    }
    
    static func fromJSValue(context: JSContext, input: JSValue): d10 {
        d10(input.asObject())
    }
}

