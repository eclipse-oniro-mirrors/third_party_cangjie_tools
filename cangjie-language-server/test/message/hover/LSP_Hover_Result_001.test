{"caseFolder":"normalTest//Result", "id":"9"}
{"jsonrpc":"2.0","id":"0","method":"initialize","params":{"processId":null,"rootPath":"C:/Users/code_project/DevEcoStudioProjects/MyApplication3","rootUri":"file:///c%3A/Users/code_project/DevEcoStudioProjects/MyApplication3/","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{},"didChangeWatchedFiles":{},"symbol":{},"executeCommand":{},"workspaceFolders":false,"configuration":false},"textDocument":{"synchronization":{"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"completionItem":{"snippetSupport":true}},"hover":{},"signatureHelp":{},"references":{},"documentHighlight":{"dynamicRegistration":true},"formatting":{},"rangeFormatting":{},"onTypeFormatting":{},"definition":{},"codeAction":{},"documentLink":{},"rename":{"prepareSupport":true},"semanticHighlightingCapabilities":{"semanticHighlighting":true},"callHierarchy":{},"semanticTokens":{"tokenTypes":["namespace","type","class","enum","interface","struct","typeParameter","parameter","variable","property","enumMember","event","function","method","macro","keyword","modifier","comment","string","number","regexp","operator","member","label"],"tokenModifiers":["declaration","definition","readonly","static","deprecated","abstract","async","modification","documentation","defaultLibrary"],"dynamicRegistration":true}}}}}
{"jsonrpc":"2.0","method":"initialized","params":{}}
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///d:/test_char/src/Result.cj","languageId":"Cangjie","version":0,"text":"// Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.\n// This source file is part of the Cangjie project, licensed under Apache-2.0\n// with Runtime Library Exception.\n//\n// See https://cangjie-lang.cn/pages/LICENSE for license information.\n\n//enum Result<T> { Success(T) | Failure(Throwable) }\nfunc test() {\n    let rInt32_1 = Result<Int32>.Success(100) // The type of'rInt32_1' is 'Result<Int32>'\n    let rInt32_12 = Result<Int32>.Success(100).getOrThrow()\n    let rInt32_1_err = Result<Int32>.Success(1.1) //err\n    let rInt32_21 = Result<Int32>.Failure(Exception()) // The type of'rInt32_2' is 'Result<Int32>'\n    let rChar = Result<Char>.Success('m') // The type of 'rChar' is 'Result<Char>'\n    let rBool = Result<Bool>.Failure(Exception()) // The type of 'rBool' is 'Result<Bool>'\n\n\n    func resultTest1() {\n        let number1: Int32 = match (rInt32_1) {\n        case Success(num) => num // matched\n        case Failure(_) => 0\n        }\n        let number2: Int32 = match (rInt32_21) {\n        case Success(num) => num\n        case Failure(_) => 0 // matched\n        }\n        let number3: Int32 = match (rInt32_21) {\n            case Success(num) => num\n           }\n    }\n    func resultTest2() {\n        let number1 = rInt32_1.getOrThrow() // number1 = 100\n        let number2: Int32 = rInt32_21.getOrThrow() // throw Exception\n        let number3: Int32 = rInt32_21.getOrThrow({Exception(\"Some Error\")}) //throw MyException\n    }\n    func resultTest3(): Result<Int32> {\n        /**\n        * this is a init32 var\n        */\n        var int32Var:Int32 = 10\n        let number1: Int32 = rInt32_1??int32Var // number1 = 100\n        let number2: Int32 = rInt32_21 ?? 0 // number2 = 0\n        var number3 = rInt32_1 !\n        return rInt32_1\n    }\n}\n\nfunc f1(): Result<String> {\n    let t: Result<String> = Result<String>.Success(\"123\")\n    let r: String = t! // r = \"ok\"\n    return Result<String>.Success(r)\n}\nfunc f2(): Result<String> {\n    let err = Exception()\n    let t: Result<String> = Result<String>.Failure(err)\n    let r: String = t! // return Result<String>.Failure(err)\n    return Result<String>.Success(r)\n}\n\n"}}}
{"jsonrpc":"2.0","id":"9","method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d:/test_char/src/Result.cj"},"position":{"line":40,"character":34}}}
{"jsonrpc":"2.0","id":"4","method":"shutdown","params":{}}
{"jsonrpc":"2.0","method":"exit","params":{}}